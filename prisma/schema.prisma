datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  User
  Admin
  Student
  Teacher
  Principal
}

enum Gender {
  Unkown
  Male
  Female
  Other
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  verified      Boolean?  @default(false)
  lastname      String?
  image         String?

  password String?
  gender   Gender?
  year     Int? // year born
  canton   String? // if not set via school

  role     Role    @default(Student)
  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String? @map(name: "school_id")
  team     Team?   @relation("TeamMembers", fields: [teamId], references: [id])
  teamId   String? @map(name: "team_id")
  teaches  Team[]  @relation("Teacher")

  ballots     Ballot[]
  attachments Attachment[]
  discussions Discussion[]
  reactions   Reaction[]
  voted       Voted[]      @relation("VotedUser")
  activity    Activity[]
  work        Work[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  Team      Team?    @relation(fields: [teamId], references: [id])
  @@map(name: "users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "verification_requests")
}

model Team {
  id     String  @id @default(cuid())
  name   String
  invite String? @unique // inviteCode to generate accounts
  code   String? @unique // code to allow voting for ballotRuns from this team
  year   Int? // in what year (roughly) were kids born (now - schoolyear - 5y)
  cards  String  @default("")
  prefs  Json    @default("{}")
  notes  Json    @default("{}")

  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String   @map(name: "school_id")
  teacher   User     @relation(name: "Teacher", fields: [teacherId], references: [id])
  teacherId String   @map(name: "teacher_id")
  members   User[]   @relation("TeamMembers")
  ballots   Ballot[]
  domain    Domain?  @relation(fields: [domainId], references: [id])
  domainId  String?  @map(name: "domain_id")

  User       User[]
  BallotRuns BallotRun[]
  Vote       Vote[]
  Voted      Voted[]
  discussion Discussion[]
  activity   Activity[]
  attachment Attachment[]
  work       Work[]
  
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "teams")
}

model School {
  id      String @id @default(cuid())
  name    String
  city    String @default("")
  canton  String @default("")
  zip     String @default("")
  address String @default("")
  type    String @default("")

  domain   Domain?  @relation(fields: [domainId], references: [id])
  domainId String?  @map(name: "domain_id")
  members  User[]
  teams    Team[]
  ballots  Ballot[]

  Vote       Vote[]
  Voted      Voted[]
  discussion Discussion[]
  activity   Activity[]
  attachment Attachment[]
  work       Work[]
  @@map(name: "schools")
}

model Domain {
  id       String  @id @default(cuid())
  name     String  @unique
  approved Boolean @default(false)

  schools School[]
  Team    Team[]

  @@map(name: "domains")
}

enum BallotScope {
  Public // Open ballot
  National // Official national ballots
  Cantonal // Official canontal ballots
  School // School ballots
  Team // class ballots
}

enum VotingStatus {
  Restricted // User is not allowed to vote 
  Open // User may vote
  Voted // User has already voted
  NotStarted // Ballot is not open yet
  Closed // Ballot is already closed
}

model Ballot {
  id          String      @id @default(cuid())
  title       String
  description String
  body        String
  start       DateTime
  end         DateTime
  scope       BallotScope @default(Public)
  canton      String?

  school    School? @relation(fields: [schoolId], references: [id])
  schoolId  String? @map(name: "school_id")
  team      Team?   @relation(fields: [teamId], references: [id])
  teamId    String? @map(name: "team_id")
  creator   User?   @relation(fields: [creatorId], references: [id])
  creatorId String? @map(name: "creator_id")

  options     Option[]
  voted       Voted[]      @relation("VotedBallot")
  votes       Vote[]
  attachments Attachment[]
  ballotRuns  BallotRun[]
  activity    Activity[]
  discussion  Discussion[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "ballots")
}

model BallotRun {
  id    String    @id @default(cuid())
  start DateTime?
  end   DateTime?
  vote  Vote[]

  ballot   Ballot @relation(fields: [ballotId], references: [id])
  ballotId String @map(name: "ballot_id")
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @map(name: "team_id")

  @@unique([ballotId, teamId])
  @@map(name: "ballot_runs")
}

model Option {
  id    String @id @default(cuid())
  vote  Int
  title String

  ballot   Ballot @relation(fields: [ballotId], references: [id])
  ballotId String @map(name: "ballot_id")

  @@map(name: "options")
}

model Voted {
  id String @id @default(cuid())

  signature String? // encrypted signature of the user

  user     User    @relation(name: "VotedUser", fields: [userId], references: [id])
  userId   String  @map(name: "user_id")
  ballot   Ballot  @relation(name: "VotedBallot", fields: [ballotId], references: [id])
  ballotId String  @map(name: "ballot_id")
  team     Team?   @relation(fields: [teamId], references: [id])
  teamId   String? @map(name: "team_id")
  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String? @map(name: "school_id")

  @@map(name: "voted")
}

model Vote {
  id         String  @id @default(cuid())
  vote       Int // 0 = abstention, 1-x = chosen option
  verify     String? // encrypted verification token
  year       Int?
  canton     String?
  schooltype String?

  ballot      Ballot     @relation(fields: [ballotId], references: [id])
  ballotId    String     @map(name: "ballot_id")
  ballotRun   BallotRun? @relation(fields: [ballotRunId], references: [id])
  ballotRunId String?    @map(name: "ballotrun_id")
  team        Team?      @relation(fields: [teamId], references: [id])
  teamId      String?    @map(name: "team_id")
  school      School?    @relation(fields: [schoolId], references: [id])
  schoolId    String?    @map(name: "school_id")

  @@map(name: "votes")
}

model Attachment {
  id    String @id @default(cuid())
  file  String @unique
  title String @default("")
  type  String @default("")

  card         String?
  user         User        @relation(fields: [userId], references: [id])
  userId       String      @map(name: "user_id")
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String      @map(name: "team_id")
  school       School?     @relation(fields: [schoolId], references: [id])
  schoolId     String?     @map(name: "school_id")
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  discussionId String?     @map(name: "discussion_id")
  ballot       Ballot?     @relation(fields: [ballotId], references: [id])
  ballotId     String?     @map(name: "ballot_id")
  work         Work?       @relation(fields: [workId], references: [id])
  workId       String?     @map(name: "work_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "attachments")
}

model Discussion {
  id    String  @id @default(cuid())
  title String  @default("")
  text  String  @default("")
  card  String?

  user     User    @relation(fields: [userId], references: [id])
  userId   String  @map(name: "user_id")
  team     Team    @relation(fields: [teamId], references: [id])
  teamId   String  @map(name: "team_id")
  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String? @map(name: "school_id")
  ballot   Ballot? @relation(fields: [ballotId], references: [id])
  ballotId String? @map(name: "ballot_id")

  reactions   Reaction[]
  attachments Attachment[]

  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  Activity  Activity[]
  @@map(name: "discussions")
}

model Work {
  id         String     @id @default(cuid())
  title      String     @default("")
  text       String     @default("")
  data       Json?
  card       String?
  visibility Visibility @default(Team)

  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @map(name: "team_id")
  school   School @relation(fields: [schoolId], references: [id])
  schoolId String @map(name: "school_id")

  users       User[]
  reactions   Reaction[]
  attachments Attachment[]
  activities  Activity[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "works")
}

model Reaction {
  id       String @id @default(cuid())
  emoij    String @default("")
  stars    Int
  feedback String

  user         User        @relation(fields: [userId], references: [id])
  userId       String      @map(name: "user_id")
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  discussionId String?     @map(name: "discussion_id")
  work         Work?       @relation(fields: [workId], references: [id])
  workId       String?     @map(name: "work_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "reactions")
}

enum Visibility {
  Private // only student and teacher can see
  Team // team can view
  School // school can view
  Public // everyone may see
}

enum ActivityType {
  Discussion
  Attachment
  Vote
  Test
  Work
  UserAccept
  UserInvite
}

model Activity {
  id         Int          @id @default(autoincrement())
  type       ActivityType
  visibility Visibility
  card       String?      @map(name: "card")
  summary    String?

  user         User        @relation(fields: [userId], references: [id])
  userId       String      @map(name: "user_id")
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String      @map(name: "team_id")
  school       School      @relation(fields: [schoolId], references: [id])
  schoolId     String      @map(name: "school_id")
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  discussionId String?     @map(name: "discussion_id")
  work         Work?       @relation(fields: [workId], references: [id])
  workId       String?     @map(name: "work_id")
  ballot       Ballot?     @relation(fields: [ballotId], references: [id])
  ballotId     String?     @map(name: "ballot_id")

  time DateTime @default(now()) @map(name: "created_at")
  @@map(name: "activities")
}

model Swissvote {
  anr            String   @id
  datum          DateTime
  titel_kurz_d   String
  titel_off_d    String?
  stichwort      String?
  swissvoteslink String
  rechtsform     Int
  poster_ja      String?
  poster_nein    String?
  annahme        Int?
  volk           Int?
  stand          Int?
  kategorien     String?

  @@map("swissvotes")
}
