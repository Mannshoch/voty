datasource db {
  provider = "postgres"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Gender {
  UNKOWN
  MALE
  FEMALE
  OTHER
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  lastname      String?
  image         String?

  password String?
  salt     String?
  gender   Gender  @default(UNKOWN)

  role    Role    @default(STUDENT)
  school  School? @relation(name: "SchoolUser", fields: [schoolId], references: [id])
  team    Team?   @relation(name: "TeamMembers", fields: [teamId], references: [id])
  teaches Team[]  @relation("TeamTeacher")

  schoolId  Int?
  teamId    Int?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "users")
  Team Team[] @relation("Teacher")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Team {
  id        Int    @default(autoincrement()) @id
  name      String
  school    School @relation(name: "SchoolTeam", fields: [schoolId], references: [id])
  schoolId  Int
  teacher   User   @relation(name: "TeamTeacher", fields: [teacherId], references: [id])
  teacherId Int
  members   User[] @relation("TeamMembers")

  @@map(name: "teams")
  User   User? @relation("Teacher", fields: [userId], references: [id])
  userId Int?
}

model School {
  id     Int    @default(autoincrement()) @id
  name   String
  domain String
  @@map(name: "schools")
  User User[] @relation("SchoolUser")
  Team Team[] @relation("SchoolTeam")
}

model Domain {
  id       Int     @default(autoincrement()) @id
  name     String  @unique
  approved Boolean @default(false)
  @@map(name: "domains")
}
