datasource db {
  provider = "postgres"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

enum Role {
  USER
  ADMIN
  STUDENT
  TEACHER
  PRINCIPAL
}

enum Gender {
  UNKOWN
  MALE
  FEMALE
  OTHER
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  verified      Boolean?  @default(false)
  lastname      String?
  image         String?

  password String?
  gender   Gender  @default(UNKOWN)

  role     Role    @default(STUDENT)
  school   School? @relation(fields: [schoolId], references: [id])
  team     Team?   @relation(fields: [teamId], references: [id])
  teaches  Team[]  @relation("Teacher")
  schoolId Int?    @map(name: "school_id")
  teamId   Int?    @map(name: "team_id")

  ballots     Ballot[]
  attachments Attachment[]
  threads     Thread[]
  reactions   Reaction[]
  voted       Voted[]      @relation("VotedUser")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "users")
  Team Team? @relation("TeamMembers", fields: [teamId], references: [id])
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "verification_requests")
}

model Team {
  id     Int     @default(autoincrement()) @id
  name   String
  invite String? @unique

  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  Int      @map(name: "school_id")
  teacher   User     @relation(name: "Teacher", fields: [teacherId], references: [id])
  teacherId Int      @map(name: "team_id")
  members   User[]   @relation("TeamMembers")
  ballots   Ballot[]
  domain    Domain?  @relation(fields: [domainId], references: [id])
  domainId  Int?     @map(name: "domain_id")

  @@map(name: "teams")
  User User[]
}

model School {
  id      Int    @default(autoincrement()) @id
  name    String
  city    String @default("")
  canton  String @default("")
  zip     String @default("")
  address String @default("")

  domain   Domain?  @relation(fields: [domainId], references: [id])
  domainId Int?     @map(name: "domain_id")
  members  User[]
  teams    Team[]
  ballots  Ballot[]

  @@map(name: "schools")
}

model Domain {
  id       Int     @default(autoincrement()) @id
  name     String  @unique
  approved Boolean @default(false)

  schools School[]
  Team    Team[]

  @@map(name: "domains")
}

enum BallotScope {
  PUBLIC // Open ballot
  NATIONAL // Official national ballots
  CANTONAL // Official canontal ballots
  SCHOOL // School ballots
  TEAM // class ballots
}

model Ballot {
  id          Int         @default(autoincrement()) @id
  title       String
  description String
  body        String
  start       DateTime
  end         DateTime
  scope       BallotScope @default(PUBLIC)
  canton      String?

  school    School? @relation(fields: [schoolId], references: [id])
  schoolId  Int?    @map(name: "school_id")
  team      Team?   @relation(fields: [teamId], references: [id])
  teamId    Int?    @map(name: "team_id")
  creator   User?   @relation(fields: [creatorId], references: [id])
  creatorId Int?    @map(name: "creator_id")
  thread    Thread? @relation(fields: [threadId], references: [id])
  threadId  Int?    @map(name: "thread_id")

  options     Options[]
  voted       Voted[]      @relation("VotedBallot")
  votes       Votes[]
  attachments Attachment[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "ballots")
}

model Options {
  id    Int    @default(autoincrement()) @id
  vote  Int
  title String

  ballot   Ballot @relation(fields: [ballotId], references: [id])
  ballotId Int    @map(name: "ballot_id")

  @@map(name: "options")
}

model Voted {
  id Int @default(autoincrement()) @id

  signature String? // encrypted signature of the user

  user     User   @relation(name: "VotedUser", fields: [userId], references: [id])
  userId   Int    @map(name: "user_id")
  ballot   Ballot @relation(name: "VotedBallot", fields: [ballotId], references: [id])
  ballotId Int    @map(name: "ballot_id")

  @@map(name: "voted")
}

model Votes {
  id     Int     @default(autoincrement()) @id
  vote   Int // 0 = abstention, 1-x = chosen option
  verify String? // encrypted verification token

  ballot   Ballot @relation(fields: [ballotId], references: [id])
  ballotId Int    @map(name: "ballot_id")

  @@map(name: "votes")
}

model Attachment {
  id    Int    @default(autoincrement()) @id
  file  String
  title String @default("")

  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @map(name: "user_id")
  ballot   Ballot? @relation(fields: [ballotId], references: [id])
  ballotId Int?    @map(name: "ballot_id")
  thread   Thread? @relation(fields: [threadId], references: [id])
  threadId Int?    @map(name: "thread_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "attachments")
}

model Thread {
  id    Int     @default(autoincrement()) @id
  title String  @default("")
  text  String  @default("")
  ref   String? // this can be used to reference a thread to content

  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @map(name: "user_id")
  parent   Thread? @relation(fields: [parentId], references: [id])
  parentId Int?    @map(name: "parent_id")

  ballot      Ballot?
  children    Thread[]     @relation("ThreadToThread")
  reactions   Reaction[]
  attachments Attachment[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "threads")
}

model Reaction {
  id    Int    @default(autoincrement()) @id
  emoij String

  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @map(name: "user_id")
  thread   Thread? @relation(fields: [threadId], references: [id])
  threadId Int?    @map(name: "thread_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "reactions")
}
