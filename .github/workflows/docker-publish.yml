name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: voty

jobs:
  cypress:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest version
        uses: actions/checkout@v2
      - name: docker-compose-test
        run: docker-compose -f docker-compose-test.yml up

  # # Run tests.
  # # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout latest version
  #       uses: actions/checkout@v2

  #     - name: Run tests
  #       uses: cypress-io/github-action@v2
  #       with:
  #         start: npm run dev
  #         wait-on: "http://localhost:3000"
  #         record: true
  #       env:
  #         # pass the Dashboard record key as an environment variable
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  #         # pass GitHub token to allow accurately detecting a build vs a re-run build
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    #needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      #- uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      # - name: Run tests
      #   uses: cypress-io/github-action@v2
      #   with:
      #     start: npm run dev
      #     wait-on: "http://localhost:3000"
      #     record: true
      #   env:
      #     # pass the Dashboard record key as an environment variable
      #     CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      #     # pass GitHub token to allow accurately detecting a build vs a re-run build
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
