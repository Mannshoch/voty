### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Attachment {
  createdAt: DateTime!
  file: String!
  id: String!
  updatedAt: DateTime!
  user: User!
}

input AttachmentCreateManyWithoutBallotInput {
  connect: [AttachmentWhereUniqueInput!]
  connectOrCreate: [AttachmentCreateOrConnectWithoutballotInput!]
  create: [AttachmentCreateWithoutBallotInput!]
}

input AttachmentCreateManyWithoutThreadInput {
  connect: [AttachmentWhereUniqueInput!]
  connectOrCreate: [AttachmentCreateOrConnectWithoutthreadInput!]
  create: [AttachmentCreateWithoutThreadInput!]
}

input AttachmentCreateManyWithoutUserInput {
  connect: [AttachmentWhereUniqueInput!]
  connectOrCreate: [AttachmentCreateOrConnectWithoutuserInput!]
  create: [AttachmentCreateWithoutUserInput!]
}

input AttachmentCreateOrConnectWithoutballotInput {
  create: AttachmentCreateWithoutBallotInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentCreateOrConnectWithoutthreadInput {
  create: AttachmentCreateWithoutThreadInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentCreateOrConnectWithoutuserInput {
  create: AttachmentCreateWithoutUserInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentCreateWithoutBallotInput {
  createdAt: DateTime
  file: String!
  id: String
  thread: ThreadCreateOneWithoutAttachmentsInput
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutAttachmentsInput!
}

input AttachmentCreateWithoutThreadInput {
  ballot: BallotCreateOneWithoutAttachmentsInput
  createdAt: DateTime
  file: String!
  id: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutAttachmentsInput!
}

input AttachmentCreateWithoutUserInput {
  ballot: BallotCreateOneWithoutAttachmentsInput
  createdAt: DateTime
  file: String!
  id: String
  thread: ThreadCreateOneWithoutAttachmentsInput
  title: String
  updatedAt: DateTime
}

input AttachmentListRelationFilter {
  every: AttachmentWhereInput
  none: AttachmentWhereInput
  some: AttachmentWhereInput
}

input AttachmentScalarWhereInput {
  AND: [AttachmentScalarWhereInput!]
  ballotId: StringNullableFilter
  createdAt: DateTimeFilter
  file: StringFilter
  id: StringFilter
  NOT: [AttachmentScalarWhereInput!]
  OR: [AttachmentScalarWhereInput!]
  threadId: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AttachmentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  file: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AttachmentUpdateManyWithoutBallotInput {
  connect: [AttachmentWhereUniqueInput!]
  connectOrCreate: [AttachmentCreateOrConnectWithoutballotInput!]
  create: [AttachmentCreateWithoutBallotInput!]
  delete: [AttachmentWhereUniqueInput!]
  deleteMany: [AttachmentScalarWhereInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  update: [AttachmentUpdateWithWhereUniqueWithoutBallotInput!]
  updateMany: [AttachmentUpdateManyWithWhereWithoutBallotInput!]
  upsert: [AttachmentUpsertWithWhereUniqueWithoutBallotInput!]
}

input AttachmentUpdateManyWithoutThreadInput {
  connect: [AttachmentWhereUniqueInput!]
  connectOrCreate: [AttachmentCreateOrConnectWithoutthreadInput!]
  create: [AttachmentCreateWithoutThreadInput!]
  delete: [AttachmentWhereUniqueInput!]
  deleteMany: [AttachmentScalarWhereInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  update: [AttachmentUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [AttachmentUpdateManyWithWhereWithoutThreadInput!]
  upsert: [AttachmentUpsertWithWhereUniqueWithoutThreadInput!]
}

input AttachmentUpdateManyWithoutUserInput {
  connect: [AttachmentWhereUniqueInput!]
  connectOrCreate: [AttachmentCreateOrConnectWithoutuserInput!]
  create: [AttachmentCreateWithoutUserInput!]
  delete: [AttachmentWhereUniqueInput!]
  deleteMany: [AttachmentScalarWhereInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  update: [AttachmentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AttachmentUpdateManyWithWhereWithoutUserInput!]
  upsert: [AttachmentUpsertWithWhereUniqueWithoutUserInput!]
}

input AttachmentUpdateManyWithWhereWithoutBallotInput {
  data: AttachmentUpdateManyMutationInput!
  where: AttachmentScalarWhereInput!
}

input AttachmentUpdateManyWithWhereWithoutThreadInput {
  data: AttachmentUpdateManyMutationInput!
  where: AttachmentScalarWhereInput!
}

input AttachmentUpdateManyWithWhereWithoutUserInput {
  data: AttachmentUpdateManyMutationInput!
  where: AttachmentScalarWhereInput!
}

input AttachmentUpdateWithoutBallotInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  file: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  thread: ThreadUpdateOneWithoutAttachmentsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAttachmentsInput
}

input AttachmentUpdateWithoutThreadInput {
  ballot: BallotUpdateOneWithoutAttachmentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  file: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAttachmentsInput
}

input AttachmentUpdateWithoutUserInput {
  ballot: BallotUpdateOneWithoutAttachmentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  file: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  thread: ThreadUpdateOneWithoutAttachmentsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AttachmentUpdateWithWhereUniqueWithoutBallotInput {
  data: AttachmentUpdateWithoutBallotInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpdateWithWhereUniqueWithoutThreadInput {
  data: AttachmentUpdateWithoutThreadInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpdateWithWhereUniqueWithoutUserInput {
  data: AttachmentUpdateWithoutUserInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpsertWithWhereUniqueWithoutBallotInput {
  create: AttachmentCreateWithoutBallotInput!
  update: AttachmentUpdateWithoutBallotInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpsertWithWhereUniqueWithoutThreadInput {
  create: AttachmentCreateWithoutThreadInput!
  update: AttachmentUpdateWithoutThreadInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpsertWithWhereUniqueWithoutUserInput {
  create: AttachmentCreateWithoutUserInput!
  update: AttachmentUpdateWithoutUserInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentWhereInput {
  AND: [AttachmentWhereInput!]
  ballot: BallotWhereInput
  ballotId: StringNullableFilter
  createdAt: DateTimeFilter
  file: StringFilter
  id: StringFilter
  NOT: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  thread: ThreadWhereInput
  threadId: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input AttachmentWhereUniqueInput {
  id: String
}

type Ballot {
  body: String!
  canton: String
  canVote: Boolean
  description: String!
  end: DateTime!
  hasVoted: Boolean
  id: String!
  schoolId: String
  scope: BallotScope!
  start: DateTime!
  teamId: String
  title: String!
}

input BallotCreateManyWithoutCreatorInput {
  connect: [BallotWhereUniqueInput!]
  connectOrCreate: [BallotCreateOrConnectWithoutcreatorInput!]
  create: [BallotCreateWithoutCreatorInput!]
}

input BallotCreateManyWithoutSchoolInput {
  connect: [BallotWhereUniqueInput!]
  connectOrCreate: [BallotCreateOrConnectWithoutschoolInput!]
  create: [BallotCreateWithoutSchoolInput!]
}

input BallotCreateManyWithoutTeamInput {
  connect: [BallotWhereUniqueInput!]
  connectOrCreate: [BallotCreateOrConnectWithoutteamInput!]
  create: [BallotCreateWithoutTeamInput!]
}

input BallotCreateOneWithoutAttachmentsInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutattachmentsInput
  create: BallotCreateWithoutAttachmentsInput
}

input BallotCreateOneWithoutBallotRunsInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutBallotRunsInput
  create: BallotCreateWithoutBallotRunsInput
}

input BallotCreateOneWithoutVotedInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutvotedInput
  create: BallotCreateWithoutVotedInput
}

input BallotCreateOneWithoutVotesInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutvotesInput
  create: BallotCreateWithoutVotesInput
}

input BallotCreateOrConnectWithoutattachmentsInput {
  create: BallotCreateWithoutAttachmentsInput!
  where: BallotWhereUniqueInput!
}

input BallotCreateOrConnectWithoutBallotRunsInput {
  create: BallotCreateWithoutBallotRunsInput!
  where: BallotWhereUniqueInput!
}

input BallotCreateOrConnectWithoutcreatorInput {
  create: BallotCreateWithoutCreatorInput!
  where: BallotWhereUniqueInput!
}

input BallotCreateOrConnectWithoutschoolInput {
  create: BallotCreateWithoutSchoolInput!
  where: BallotWhereUniqueInput!
}

input BallotCreateOrConnectWithoutteamInput {
  create: BallotCreateWithoutTeamInput!
  where: BallotWhereUniqueInput!
}

input BallotCreateOrConnectWithoutvotedInput {
  create: BallotCreateWithoutVotedInput!
  where: BallotWhereUniqueInput!
}

input BallotCreateOrConnectWithoutvotesInput {
  create: BallotCreateWithoutVotesInput!
  where: BallotWhereUniqueInput!
}

input BallotCreateWithoutAttachmentsInput {
  BallotRuns: BallotRunCreateManyWithoutBallotInput
  body: String!
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  id: String
  options: OptionCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: BallotScope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutBallotRunsInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  body: String!
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  id: String
  options: OptionCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: BallotScope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutCreatorInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  BallotRuns: BallotRunCreateManyWithoutBallotInput
  body: String!
  canton: String
  createdAt: DateTime
  description: String!
  end: DateTime!
  id: String
  options: OptionCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: BallotScope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutSchoolInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  BallotRuns: BallotRunCreateManyWithoutBallotInput
  body: String!
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  id: String
  options: OptionCreateManyWithoutBallotInput
  scope: BallotScope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutTeamInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  BallotRuns: BallotRunCreateManyWithoutBallotInput
  body: String!
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  id: String
  options: OptionCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: BallotScope
  start: DateTime!
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutVotedInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  BallotRuns: BallotRunCreateManyWithoutBallotInput
  body: String!
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  id: String
  options: OptionCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: BallotScope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  title: String!
  updatedAt: DateTime
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutVotesInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  BallotRuns: BallotRunCreateManyWithoutBallotInput
  body: String!
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  id: String
  options: OptionCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: BallotScope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
}

input BallotIdTeamIdCompoundUniqueInput {
  ballotId: String!
  teamId: String!
}

input BallotListRelationFilter {
  every: BallotWhereInput
  none: BallotWhereInput
  some: BallotWhereInput
}

input BallotOrderByInput {
  body: SortOrder
  canton: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  description: SortOrder
  end: SortOrder
  id: SortOrder
  schoolId: SortOrder
  scope: SortOrder
  start: SortOrder
  teamId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type BallotResults {
  abs: Int
  no: Int
  total: Int
  yes: Int
}

type BallotRun {
  ballot: Ballot!
  end: DateTime
  id: String!
  start: DateTime
  team: Team!
}

input BallotRunCreateManyWithoutBallotInput {
  connect: [BallotRunWhereUniqueInput!]
  connectOrCreate: [BallotRunCreateOrConnectWithoutballotInput!]
  create: [BallotRunCreateWithoutBallotInput!]
}

input BallotRunCreateManyWithoutTeamInput {
  connect: [BallotRunWhereUniqueInput!]
  connectOrCreate: [BallotRunCreateOrConnectWithoutteamInput!]
  create: [BallotRunCreateWithoutTeamInput!]
}

input BallotRunCreateOneWithoutVoteInput {
  connect: BallotRunWhereUniqueInput
  connectOrCreate: BallotRunCreateOrConnectWithoutVoteInput
  create: BallotRunCreateWithoutVoteInput
}

input BallotRunCreateOrConnectWithoutballotInput {
  create: BallotRunCreateWithoutBallotInput!
  where: BallotRunWhereUniqueInput!
}

input BallotRunCreateOrConnectWithoutteamInput {
  create: BallotRunCreateWithoutTeamInput!
  where: BallotRunWhereUniqueInput!
}

input BallotRunCreateOrConnectWithoutVoteInput {
  create: BallotRunCreateWithoutVoteInput!
  where: BallotRunWhereUniqueInput!
}

input BallotRunCreateWithoutBallotInput {
  end: DateTime
  id: String
  start: DateTime
  team: TeamCreateOneWithoutBallotRunsInput!
  Vote: VoteCreateManyWithoutBallotRunInput
}

input BallotRunCreateWithoutTeamInput {
  ballot: BallotCreateOneWithoutBallotRunsInput!
  end: DateTime
  id: String
  start: DateTime
  Vote: VoteCreateManyWithoutBallotRunInput
}

input BallotRunCreateWithoutVoteInput {
  ballot: BallotCreateOneWithoutBallotRunsInput!
  end: DateTime
  id: String
  start: DateTime
  team: TeamCreateOneWithoutBallotRunsInput!
}

input BallotRunListRelationFilter {
  every: BallotRunWhereInput
  none: BallotRunWhereInput
  some: BallotRunWhereInput
}

input BallotRunScalarWhereInput {
  AND: [BallotRunScalarWhereInput!]
  ballotId: StringFilter
  end: DateTimeNullableFilter
  id: StringFilter
  NOT: [BallotRunScalarWhereInput!]
  OR: [BallotRunScalarWhereInput!]
  start: DateTimeNullableFilter
  teamId: StringFilter
}

input BallotRunUpdateManyMutationInput {
  end: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  start: NullableDateTimeFieldUpdateOperationsInput
}

input BallotRunUpdateManyWithoutBallotInput {
  connect: [BallotRunWhereUniqueInput!]
  connectOrCreate: [BallotRunCreateOrConnectWithoutballotInput!]
  create: [BallotRunCreateWithoutBallotInput!]
  delete: [BallotRunWhereUniqueInput!]
  deleteMany: [BallotRunScalarWhereInput!]
  disconnect: [BallotRunWhereUniqueInput!]
  set: [BallotRunWhereUniqueInput!]
  update: [BallotRunUpdateWithWhereUniqueWithoutBallotInput!]
  updateMany: [BallotRunUpdateManyWithWhereWithoutBallotInput!]
  upsert: [BallotRunUpsertWithWhereUniqueWithoutBallotInput!]
}

input BallotRunUpdateManyWithoutTeamInput {
  connect: [BallotRunWhereUniqueInput!]
  connectOrCreate: [BallotRunCreateOrConnectWithoutteamInput!]
  create: [BallotRunCreateWithoutTeamInput!]
  delete: [BallotRunWhereUniqueInput!]
  deleteMany: [BallotRunScalarWhereInput!]
  disconnect: [BallotRunWhereUniqueInput!]
  set: [BallotRunWhereUniqueInput!]
  update: [BallotRunUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [BallotRunUpdateManyWithWhereWithoutTeamInput!]
  upsert: [BallotRunUpsertWithWhereUniqueWithoutTeamInput!]
}

input BallotRunUpdateManyWithWhereWithoutBallotInput {
  data: BallotRunUpdateManyMutationInput!
  where: BallotRunScalarWhereInput!
}

input BallotRunUpdateManyWithWhereWithoutTeamInput {
  data: BallotRunUpdateManyMutationInput!
  where: BallotRunScalarWhereInput!
}

input BallotRunUpdateOneWithoutVoteInput {
  connect: BallotRunWhereUniqueInput
  connectOrCreate: BallotRunCreateOrConnectWithoutVoteInput
  create: BallotRunCreateWithoutVoteInput
  delete: Boolean
  disconnect: Boolean
  update: BallotRunUpdateWithoutVoteInput
  upsert: BallotRunUpsertWithoutVoteInput
}

input BallotRunUpdateWithoutBallotInput {
  end: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  start: NullableDateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutBallotRunsInput
  Vote: VoteUpdateManyWithoutBallotRunInput
}

input BallotRunUpdateWithoutTeamInput {
  ballot: BallotUpdateOneRequiredWithoutBallotRunsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  start: NullableDateTimeFieldUpdateOperationsInput
  Vote: VoteUpdateManyWithoutBallotRunInput
}

input BallotRunUpdateWithoutVoteInput {
  ballot: BallotUpdateOneRequiredWithoutBallotRunsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  start: NullableDateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutBallotRunsInput
}

input BallotRunUpdateWithWhereUniqueWithoutBallotInput {
  data: BallotRunUpdateWithoutBallotInput!
  where: BallotRunWhereUniqueInput!
}

input BallotRunUpdateWithWhereUniqueWithoutTeamInput {
  data: BallotRunUpdateWithoutTeamInput!
  where: BallotRunWhereUniqueInput!
}

input BallotRunUpsertWithoutVoteInput {
  create: BallotRunCreateWithoutVoteInput!
  update: BallotRunUpdateWithoutVoteInput!
}

input BallotRunUpsertWithWhereUniqueWithoutBallotInput {
  create: BallotRunCreateWithoutBallotInput!
  update: BallotRunUpdateWithoutBallotInput!
  where: BallotRunWhereUniqueInput!
}

input BallotRunUpsertWithWhereUniqueWithoutTeamInput {
  create: BallotRunCreateWithoutTeamInput!
  update: BallotRunUpdateWithoutTeamInput!
  where: BallotRunWhereUniqueInput!
}

input BallotRunWhereInput {
  AND: [BallotRunWhereInput!]
  ballot: BallotWhereInput
  ballotId: StringFilter
  end: DateTimeNullableFilter
  id: StringFilter
  NOT: [BallotRunWhereInput!]
  OR: [BallotRunWhereInput!]
  start: DateTimeNullableFilter
  team: TeamWhereInput
  teamId: StringFilter
  Vote: VoteListRelationFilter
}

input BallotRunWhereUniqueInput {
  ballotId_teamId: BallotIdTeamIdCompoundUniqueInput
  id: String
}

input BallotScalarWhereInput {
  AND: [BallotScalarWhereInput!]
  body: StringFilter
  canton: StringNullableFilter
  createdAt: DateTimeFilter
  creatorId: StringNullableFilter
  description: StringFilter
  end: DateTimeFilter
  id: StringFilter
  NOT: [BallotScalarWhereInput!]
  OR: [BallotScalarWhereInput!]
  schoolId: StringNullableFilter
  scope: EnumBallotScopeFilter
  start: DateTimeFilter
  teamId: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

enum BallotScope {
  Cantonal
  National
  Public
  School
  Team
}

input BallotUpdateManyMutationInput {
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BallotUpdateManyWithoutCreatorInput {
  connect: [BallotWhereUniqueInput!]
  connectOrCreate: [BallotCreateOrConnectWithoutcreatorInput!]
  create: [BallotCreateWithoutCreatorInput!]
  delete: [BallotWhereUniqueInput!]
  deleteMany: [BallotScalarWhereInput!]
  disconnect: [BallotWhereUniqueInput!]
  set: [BallotWhereUniqueInput!]
  update: [BallotUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [BallotUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [BallotUpsertWithWhereUniqueWithoutCreatorInput!]
}

input BallotUpdateManyWithoutSchoolInput {
  connect: [BallotWhereUniqueInput!]
  connectOrCreate: [BallotCreateOrConnectWithoutschoolInput!]
  create: [BallotCreateWithoutSchoolInput!]
  delete: [BallotWhereUniqueInput!]
  deleteMany: [BallotScalarWhereInput!]
  disconnect: [BallotWhereUniqueInput!]
  set: [BallotWhereUniqueInput!]
  update: [BallotUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [BallotUpdateManyWithWhereWithoutSchoolInput!]
  upsert: [BallotUpsertWithWhereUniqueWithoutSchoolInput!]
}

input BallotUpdateManyWithoutTeamInput {
  connect: [BallotWhereUniqueInput!]
  connectOrCreate: [BallotCreateOrConnectWithoutteamInput!]
  create: [BallotCreateWithoutTeamInput!]
  delete: [BallotWhereUniqueInput!]
  deleteMany: [BallotScalarWhereInput!]
  disconnect: [BallotWhereUniqueInput!]
  set: [BallotWhereUniqueInput!]
  update: [BallotUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [BallotUpdateManyWithWhereWithoutTeamInput!]
  upsert: [BallotUpsertWithWhereUniqueWithoutTeamInput!]
}

input BallotUpdateManyWithWhereWithoutCreatorInput {
  data: BallotUpdateManyMutationInput!
  where: BallotScalarWhereInput!
}

input BallotUpdateManyWithWhereWithoutSchoolInput {
  data: BallotUpdateManyMutationInput!
  where: BallotScalarWhereInput!
}

input BallotUpdateManyWithWhereWithoutTeamInput {
  data: BallotUpdateManyMutationInput!
  where: BallotScalarWhereInput!
}

input BallotUpdateOneRequiredWithoutBallotRunsInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutBallotRunsInput
  create: BallotCreateWithoutBallotRunsInput
  update: BallotUpdateWithoutBallotRunsInput
  upsert: BallotUpsertWithoutBallotRunsInput
}

input BallotUpdateOneRequiredWithoutVotedInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutvotedInput
  create: BallotCreateWithoutVotedInput
  update: BallotUpdateWithoutVotedInput
  upsert: BallotUpsertWithoutVotedInput
}

input BallotUpdateOneRequiredWithoutVotesInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutvotesInput
  create: BallotCreateWithoutVotesInput
  update: BallotUpdateWithoutVotesInput
  upsert: BallotUpsertWithoutVotesInput
}

input BallotUpdateOneWithoutAttachmentsInput {
  connect: BallotWhereUniqueInput
  connectOrCreate: BallotCreateOrConnectWithoutattachmentsInput
  create: BallotCreateWithoutAttachmentsInput
  delete: Boolean
  disconnect: Boolean
  update: BallotUpdateWithoutAttachmentsInput
  upsert: BallotUpsertWithoutAttachmentsInput
}

input BallotUpdateWithoutAttachmentsInput {
  BallotRuns: BallotRunUpdateManyWithoutBallotInput
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneWithoutBallotsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  options: OptionUpdateManyWithoutBallotInput
  school: SchoolUpdateOneWithoutBallotsInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutBallotsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutBallotInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutBallotRunsInput {
  attachments: AttachmentUpdateManyWithoutBallotInput
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneWithoutBallotsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  options: OptionUpdateManyWithoutBallotInput
  school: SchoolUpdateOneWithoutBallotsInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutBallotsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutBallotInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutCreatorInput {
  attachments: AttachmentUpdateManyWithoutBallotInput
  BallotRuns: BallotRunUpdateManyWithoutBallotInput
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  options: OptionUpdateManyWithoutBallotInput
  school: SchoolUpdateOneWithoutBallotsInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutBallotsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutBallotInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutSchoolInput {
  attachments: AttachmentUpdateManyWithoutBallotInput
  BallotRuns: BallotRunUpdateManyWithoutBallotInput
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneWithoutBallotsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  options: OptionUpdateManyWithoutBallotInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutBallotsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutBallotInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutTeamInput {
  attachments: AttachmentUpdateManyWithoutBallotInput
  BallotRuns: BallotRunUpdateManyWithoutBallotInput
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneWithoutBallotsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  options: OptionUpdateManyWithoutBallotInput
  school: SchoolUpdateOneWithoutBallotsInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutBallotInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutVotedInput {
  attachments: AttachmentUpdateManyWithoutBallotInput
  BallotRuns: BallotRunUpdateManyWithoutBallotInput
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneWithoutBallotsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  options: OptionUpdateManyWithoutBallotInput
  school: SchoolUpdateOneWithoutBallotsInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutBallotsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutVotesInput {
  attachments: AttachmentUpdateManyWithoutBallotInput
  BallotRuns: BallotRunUpdateManyWithoutBallotInput
  body: StringFieldUpdateOperationsInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneWithoutBallotsInput
  description: StringFieldUpdateOperationsInput
  end: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  options: OptionUpdateManyWithoutBallotInput
  school: SchoolUpdateOneWithoutBallotsInput
  scope: EnumBallotScopeFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutBallotsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutBallotInput
}

input BallotUpdateWithWhereUniqueWithoutCreatorInput {
  data: BallotUpdateWithoutCreatorInput!
  where: BallotWhereUniqueInput!
}

input BallotUpdateWithWhereUniqueWithoutSchoolInput {
  data: BallotUpdateWithoutSchoolInput!
  where: BallotWhereUniqueInput!
}

input BallotUpdateWithWhereUniqueWithoutTeamInput {
  data: BallotUpdateWithoutTeamInput!
  where: BallotWhereUniqueInput!
}

input BallotUpsertWithoutAttachmentsInput {
  create: BallotCreateWithoutAttachmentsInput!
  update: BallotUpdateWithoutAttachmentsInput!
}

input BallotUpsertWithoutBallotRunsInput {
  create: BallotCreateWithoutBallotRunsInput!
  update: BallotUpdateWithoutBallotRunsInput!
}

input BallotUpsertWithoutVotedInput {
  create: BallotCreateWithoutVotedInput!
  update: BallotUpdateWithoutVotedInput!
}

input BallotUpsertWithoutVotesInput {
  create: BallotCreateWithoutVotesInput!
  update: BallotUpdateWithoutVotesInput!
}

input BallotUpsertWithWhereUniqueWithoutCreatorInput {
  create: BallotCreateWithoutCreatorInput!
  update: BallotUpdateWithoutCreatorInput!
  where: BallotWhereUniqueInput!
}

input BallotUpsertWithWhereUniqueWithoutSchoolInput {
  create: BallotCreateWithoutSchoolInput!
  update: BallotUpdateWithoutSchoolInput!
  where: BallotWhereUniqueInput!
}

input BallotUpsertWithWhereUniqueWithoutTeamInput {
  create: BallotCreateWithoutTeamInput!
  update: BallotUpdateWithoutTeamInput!
  where: BallotWhereUniqueInput!
}

input BallotWhereInput {
  AND: [BallotWhereInput!]
  attachments: AttachmentListRelationFilter
  BallotRuns: BallotRunListRelationFilter
  body: StringFilter
  canton: StringNullableFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringNullableFilter
  description: StringFilter
  end: DateTimeFilter
  id: StringFilter
  NOT: [BallotWhereInput!]
  options: OptionListRelationFilter
  OR: [BallotWhereInput!]
  school: SchoolWhereInput
  schoolId: StringNullableFilter
  scope: EnumBallotScopeFilter
  start: DateTimeFilter
  team: TeamWhereInput
  teamId: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  voted: VotedListRelationFilter
  votes: VoteListRelationFilter
}

input BallotWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Card {
  age: String
  content: String
  description: String
  duration: String
  id: String
  keywords: String
  source: String
  title: String
  type: String
  url: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Domain {
  approved: Boolean!
  id: String!
  name: String!
  schools(
    after: SchoolWhereUniqueInput
    before: SchoolWhereUniqueInput
    first: Int
    last: Int
  ): [School!]!
}

input DomainCreateOneWithoutSchoolsInput {
  connect: DomainWhereUniqueInput
  connectOrCreate: DomainCreateOrConnectWithoutschoolsInput
  create: DomainCreateWithoutSchoolsInput
}

input DomainCreateOneWithoutTeamInput {
  connect: DomainWhereUniqueInput
  connectOrCreate: DomainCreateOrConnectWithoutTeamInput
  create: DomainCreateWithoutTeamInput
}

input DomainCreateOrConnectWithoutschoolsInput {
  create: DomainCreateWithoutSchoolsInput!
  where: DomainWhereUniqueInput!
}

input DomainCreateOrConnectWithoutTeamInput {
  create: DomainCreateWithoutTeamInput!
  where: DomainWhereUniqueInput!
}

input DomainCreateWithoutSchoolsInput {
  approved: Boolean
  id: String
  name: String!
  Team: TeamCreateManyWithoutDomainInput
}

input DomainCreateWithoutTeamInput {
  approved: Boolean
  id: String
  name: String!
  schools: SchoolCreateManyWithoutDomainInput
}

input DomainUpdateOneWithoutSchoolsInput {
  connect: DomainWhereUniqueInput
  connectOrCreate: DomainCreateOrConnectWithoutschoolsInput
  create: DomainCreateWithoutSchoolsInput
  delete: Boolean
  disconnect: Boolean
  update: DomainUpdateWithoutSchoolsInput
  upsert: DomainUpsertWithoutSchoolsInput
}

input DomainUpdateOneWithoutTeamInput {
  connect: DomainWhereUniqueInput
  connectOrCreate: DomainCreateOrConnectWithoutTeamInput
  create: DomainCreateWithoutTeamInput
  delete: Boolean
  disconnect: Boolean
  update: DomainUpdateWithoutTeamInput
  upsert: DomainUpsertWithoutTeamInput
}

input DomainUpdateWithoutSchoolsInput {
  approved: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Team: TeamUpdateManyWithoutDomainInput
}

input DomainUpdateWithoutTeamInput {
  approved: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schools: SchoolUpdateManyWithoutDomainInput
}

input DomainUpsertWithoutSchoolsInput {
  create: DomainCreateWithoutSchoolsInput!
  update: DomainUpdateWithoutSchoolsInput!
}

input DomainUpsertWithoutTeamInput {
  create: DomainCreateWithoutTeamInput!
  update: DomainUpdateWithoutTeamInput!
}

input DomainWhereInput {
  AND: [DomainWhereInput!]
  approved: BoolFilter
  id: StringFilter
  name: StringFilter
  NOT: [DomainWhereInput!]
  OR: [DomainWhereInput!]
  schools: SchoolListRelationFilter
  Team: TeamListRelationFilter
}

input DomainWhereUniqueInput {
  id: String
  name: String
}

input EnumBallotScopeFieldUpdateOperationsInput {
  set: BallotScope
}

input EnumBallotScopeFilter {
  equals: BallotScope
  in: [BallotScope!]
  not: NestedEnumBallotScopeFilter
  notIn: [BallotScope!]
}

input EnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

enum Gender {
  Female
  Male
  Other
  Unkown
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type InviteResponse {
  created: [String]
  duplicated: [String]
  failed: [String]
  team: Team
}

type Mutation {
  acceptInvite(invite: String!): Team
  addBallotRun(ballotId: String!, teamId: String!): BallotRun
  changePassword(password: String): ResponseLogin
  checkVerification(token: String): ResponseLogin
  createInvitedUser(
    email: String
    invite: String!
    lastname: String
    name: String
    password: String
  ): User
  createOneSchool(data: SchoolCreateInput!): School!
  createOneTeam(data: TeamCreateInput!): Team!
  createUser(data: UserCreateInput!): User!
  deleteAccount: Response
  deleteOneSchool(where: SchoolWhereUniqueInput!): School
  deleteOneTeam(where: TeamWhereUniqueInput!): Team
  deleteUser(where: UserWhereUniqueInput!): User
  emailVerification(email: String!, purpose: String!): ResponseLogin
  endBallotRun(ballotRunId: String!): BallotRun
  inviteStudents(emails: [String!], team: String!): InviteResponse
  login(email: String!, password: String!): ResponseLogin
  postThread(
    ref: String!
    teamId: String!
    text: String!
    title: String!
  ): Thread
  removeBallotRun(ballotRunId: String!): Response
  setSchool(school: String!): User
  startBallotRun(ballotRunId: String!): BallotRun
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  vote(ballotId: String!, vote: Int!): Vote
  voteCode(ballotRunId: String!, code: String!, vote: Int!): Response
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumBallotScopeFilter {
  equals: BallotScope
  in: [BallotScope!]
  not: NestedEnumBallotScopeFilter
  notIn: [BallotScope!]
}

input NestedEnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input OptionCreateManyWithoutBallotInput {
  connect: [OptionWhereUniqueInput!]
  connectOrCreate: [OptionCreateOrConnectWithoutballotInput!]
  create: [OptionCreateWithoutBallotInput!]
}

input OptionCreateOrConnectWithoutballotInput {
  create: OptionCreateWithoutBallotInput!
  where: OptionWhereUniqueInput!
}

input OptionCreateWithoutBallotInput {
  id: String
  title: String!
  vote: Int!
}

input OptionListRelationFilter {
  every: OptionWhereInput
  none: OptionWhereInput
  some: OptionWhereInput
}

input OptionScalarWhereInput {
  AND: [OptionScalarWhereInput!]
  ballotId: StringFilter
  id: StringFilter
  NOT: [OptionScalarWhereInput!]
  OR: [OptionScalarWhereInput!]
  title: StringFilter
  vote: IntFilter
}

input OptionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input OptionUpdateManyWithoutBallotInput {
  connect: [OptionWhereUniqueInput!]
  connectOrCreate: [OptionCreateOrConnectWithoutballotInput!]
  create: [OptionCreateWithoutBallotInput!]
  delete: [OptionWhereUniqueInput!]
  deleteMany: [OptionScalarWhereInput!]
  disconnect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueWithoutBallotInput!]
  updateMany: [OptionUpdateManyWithWhereWithoutBallotInput!]
  upsert: [OptionUpsertWithWhereUniqueWithoutBallotInput!]
}

input OptionUpdateManyWithWhereWithoutBallotInput {
  data: OptionUpdateManyMutationInput!
  where: OptionScalarWhereInput!
}

input OptionUpdateWithoutBallotInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input OptionUpdateWithWhereUniqueWithoutBallotInput {
  data: OptionUpdateWithoutBallotInput!
  where: OptionWhereUniqueInput!
}

input OptionUpsertWithWhereUniqueWithoutBallotInput {
  create: OptionCreateWithoutBallotInput!
  update: OptionUpdateWithoutBallotInput!
  where: OptionWhereUniqueInput!
}

input OptionWhereInput {
  AND: [OptionWhereInput!]
  ballot: BallotWhereInput
  ballotId: StringFilter
  id: StringFilter
  NOT: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  title: StringFilter
  vote: IntFilter
}

input OptionWhereUniqueInput {
  id: String
}

type Query {
  ballot(where: BallotWhereUniqueInput!): Ballot
  ballots(
    after: BallotWhereUniqueInput
    before: BallotWhereUniqueInput
    first: Int
    last: Int
    orderBy: [BallotOrderByInput!]
    where: BallotWhereInput
  ): [Ballot!]!
  cards(age: String, keywords: String, type: Int): [Card]
  getBallotResults(
    ballotId: String!
    ballotRunId: String
    canton: String
    schoolId: String
    teamId: String
  ): BallotResults
  getBallotRuns(teamId: String!): [BallotRun]
  getTeamThreads(ref: String!, teamId: String): [Thread]
  me: User
  school(where: SchoolWhereUniqueInput!): School
  schools(
    after: SchoolWhereUniqueInput
    before: SchoolWhereUniqueInput
    first: Int
    last: Int
    orderBy: [SchoolOrderByInput!]
    where: SchoolWhereInput
  ): [School!]!
  swissvotes(keywords: String, result: Int, type: Int): [Swissvote]
  team(where: TeamWhereUniqueInput!): Team
  teams(
    after: TeamWhereUniqueInput
    before: TeamWhereUniqueInput
    first: Int
    last: Int
    orderBy: [TeamOrderByInput!]
    where: TeamWhereInput
  ): [Team!]!
  user(where: UserWhereUniqueInput!): User
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
    orderBy: [UserOrderByInput!]
    where: UserWhereInput
  ): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Reaction {
  emoij: String!
  id: String!
  thread: Thread
  user: User!
}

input ReactionCreateManyWithoutThreadInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutthreadInput!]
  create: [ReactionCreateWithoutThreadInput!]
}

input ReactionCreateManyWithoutUserInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutuserInput!]
  create: [ReactionCreateWithoutUserInput!]
}

input ReactionCreateOrConnectWithoutthreadInput {
  create: ReactionCreateWithoutThreadInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateOrConnectWithoutuserInput {
  create: ReactionCreateWithoutUserInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateWithoutThreadInput {
  createdAt: DateTime
  emoij: String!
  id: String
  updatedAt: DateTime
  user: UserCreateOneWithoutReactionsInput!
}

input ReactionCreateWithoutUserInput {
  createdAt: DateTime
  emoij: String!
  id: String
  thread: ThreadCreateOneWithoutReactionsInput
  updatedAt: DateTime
}

input ReactionListRelationFilter {
  every: ReactionWhereInput
  none: ReactionWhereInput
  some: ReactionWhereInput
}

input ReactionScalarWhereInput {
  AND: [ReactionScalarWhereInput!]
  createdAt: DateTimeFilter
  emoij: StringFilter
  id: StringFilter
  NOT: [ReactionScalarWhereInput!]
  OR: [ReactionScalarWhereInput!]
  threadId: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ReactionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  emoij: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateManyWithoutThreadInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutthreadInput!]
  create: [ReactionCreateWithoutThreadInput!]
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutThreadInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutThreadInput!]
}

input ReactionUpdateManyWithoutUserInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutuserInput!]
  create: [ReactionCreateWithoutUserInput!]
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionUpdateManyWithWhereWithoutThreadInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithWhereWithoutUserInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateWithoutThreadInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  emoij: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReactionsInput
}

input ReactionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  emoij: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  thread: ThreadUpdateOneWithoutReactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateWithWhereUniqueWithoutThreadInput {
  data: ReactionUpdateWithoutThreadInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithWhereUniqueWithoutUserInput {
  data: ReactionUpdateWithoutUserInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpsertWithWhereUniqueWithoutThreadInput {
  create: ReactionCreateWithoutThreadInput!
  update: ReactionUpdateWithoutThreadInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpsertWithWhereUniqueWithoutUserInput {
  create: ReactionCreateWithoutUserInput!
  update: ReactionUpdateWithoutUserInput!
  where: ReactionWhereUniqueInput!
}

input ReactionWhereInput {
  AND: [ReactionWhereInput!]
  createdAt: DateTimeFilter
  emoij: StringFilter
  id: StringFilter
  NOT: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  thread: ThreadWhereInput
  threadId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ReactionWhereUniqueInput {
  id: String
}

type Response {
  error: Boolean
  message: String
  success: Boolean
}

type ResponseLogin {
  token: String
  user: User
}

enum Role {
  Admin
  Principal
  Student
  Teacher
  User
}

type School {
  address: String!
  canton: String!
  city: String!
  id: String!
  members(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
  ): [User!]!
  name: String!
  teams(
    after: TeamWhereUniqueInput
    before: TeamWhereUniqueInput
    first: Int
    last: Int
  ): [Team!]!
  type: String!
  zip: String!
}

input SchoolCreateInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  id: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  Thread: ThreadCreateManyWithoutSchoolInput
  type: String
  Vote: VoteCreateManyWithoutSchoolInput
  Voted: VotedCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateManyWithoutDomainInput {
  connect: [SchoolWhereUniqueInput!]
  connectOrCreate: [SchoolCreateOrConnectWithoutdomainInput!]
  create: [SchoolCreateWithoutDomainInput!]
}

input SchoolCreateOneWithoutBallotsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutballotsInput
  create: SchoolCreateWithoutBallotsInput
}

input SchoolCreateOneWithoutMembersInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutmembersInput
  create: SchoolCreateWithoutMembersInput
}

input SchoolCreateOneWithoutTeamsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutteamsInput
  create: SchoolCreateWithoutTeamsInput
}

input SchoolCreateOneWithoutThreadInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutThreadInput
  create: SchoolCreateWithoutThreadInput
}

input SchoolCreateOneWithoutVotedInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutVotedInput
  create: SchoolCreateWithoutVotedInput
}

input SchoolCreateOneWithoutVoteInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutVoteInput
  create: SchoolCreateWithoutVoteInput
}

input SchoolCreateOrConnectWithoutballotsInput {
  create: SchoolCreateWithoutBallotsInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutdomainInput {
  create: SchoolCreateWithoutDomainInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutmembersInput {
  create: SchoolCreateWithoutMembersInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutteamsInput {
  create: SchoolCreateWithoutTeamsInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutThreadInput {
  create: SchoolCreateWithoutThreadInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutVotedInput {
  create: SchoolCreateWithoutVotedInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutVoteInput {
  create: SchoolCreateWithoutVoteInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateWithoutBallotsInput {
  address: String
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  id: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  Thread: ThreadCreateManyWithoutSchoolInput
  type: String
  Vote: VoteCreateManyWithoutSchoolInput
  Voted: VotedCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutDomainInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  id: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  Thread: ThreadCreateManyWithoutSchoolInput
  type: String
  Vote: VoteCreateManyWithoutSchoolInput
  Voted: VotedCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutMembersInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  id: String
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  Thread: ThreadCreateManyWithoutSchoolInput
  type: String
  Vote: VoteCreateManyWithoutSchoolInput
  Voted: VotedCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutTeamsInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  id: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  Thread: ThreadCreateManyWithoutSchoolInput
  type: String
  Vote: VoteCreateManyWithoutSchoolInput
  Voted: VotedCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutThreadInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  id: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  type: String
  Vote: VoteCreateManyWithoutSchoolInput
  Voted: VotedCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutVotedInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  id: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  Thread: ThreadCreateManyWithoutSchoolInput
  type: String
  Vote: VoteCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutVoteInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  id: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  Thread: ThreadCreateManyWithoutSchoolInput
  type: String
  Voted: VotedCreateManyWithoutSchoolInput
  zip: String
}

input SchoolListRelationFilter {
  every: SchoolWhereInput
  none: SchoolWhereInput
  some: SchoolWhereInput
}

input SchoolOrderByInput {
  address: SortOrder
  canton: SortOrder
  city: SortOrder
  domainId: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  zip: SortOrder
}

input SchoolScalarWhereInput {
  address: StringFilter
  AND: [SchoolScalarWhereInput!]
  canton: StringFilter
  city: StringFilter
  domainId: StringNullableFilter
  id: StringFilter
  name: StringFilter
  NOT: [SchoolScalarWhereInput!]
  OR: [SchoolScalarWhereInput!]
  type: StringFilter
  zip: StringFilter
}

input SchoolUpdateManyMutationInput {
  address: StringFieldUpdateOperationsInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateManyWithoutDomainInput {
  connect: [SchoolWhereUniqueInput!]
  connectOrCreate: [SchoolCreateOrConnectWithoutdomainInput!]
  create: [SchoolCreateWithoutDomainInput!]
  delete: [SchoolWhereUniqueInput!]
  deleteMany: [SchoolScalarWhereInput!]
  disconnect: [SchoolWhereUniqueInput!]
  set: [SchoolWhereUniqueInput!]
  update: [SchoolUpdateWithWhereUniqueWithoutDomainInput!]
  updateMany: [SchoolUpdateManyWithWhereWithoutDomainInput!]
  upsert: [SchoolUpsertWithWhereUniqueWithoutDomainInput!]
}

input SchoolUpdateManyWithWhereWithoutDomainInput {
  data: SchoolUpdateManyMutationInput!
  where: SchoolScalarWhereInput!
}

input SchoolUpdateOneRequiredWithoutTeamsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutteamsInput
  create: SchoolCreateWithoutTeamsInput
  update: SchoolUpdateWithoutTeamsInput
  upsert: SchoolUpsertWithoutTeamsInput
}

input SchoolUpdateOneWithoutBallotsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutballotsInput
  create: SchoolCreateWithoutBallotsInput
  delete: Boolean
  disconnect: Boolean
  update: SchoolUpdateWithoutBallotsInput
  upsert: SchoolUpsertWithoutBallotsInput
}

input SchoolUpdateOneWithoutMembersInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutmembersInput
  create: SchoolCreateWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  update: SchoolUpdateWithoutMembersInput
  upsert: SchoolUpsertWithoutMembersInput
}

input SchoolUpdateOneWithoutThreadInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutThreadInput
  create: SchoolCreateWithoutThreadInput
  delete: Boolean
  disconnect: Boolean
  update: SchoolUpdateWithoutThreadInput
  upsert: SchoolUpsertWithoutThreadInput
}

input SchoolUpdateOneWithoutVotedInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutVotedInput
  create: SchoolCreateWithoutVotedInput
  delete: Boolean
  disconnect: Boolean
  update: SchoolUpdateWithoutVotedInput
  upsert: SchoolUpsertWithoutVotedInput
}

input SchoolUpdateOneWithoutVoteInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutVoteInput
  create: SchoolCreateWithoutVoteInput
  delete: Boolean
  disconnect: Boolean
  update: SchoolUpdateWithoutVoteInput
  upsert: SchoolUpsertWithoutVoteInput
}

input SchoolUpdateWithoutBallotsInput {
  address: StringFieldUpdateOperationsInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutSchoolsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutSchoolInput
  name: StringFieldUpdateOperationsInput
  teams: TeamUpdateManyWithoutSchoolInput
  Thread: ThreadUpdateManyWithoutSchoolInput
  type: StringFieldUpdateOperationsInput
  Vote: VoteUpdateManyWithoutSchoolInput
  Voted: VotedUpdateManyWithoutSchoolInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithoutDomainInput {
  address: StringFieldUpdateOperationsInput
  ballots: BallotUpdateManyWithoutSchoolInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutSchoolInput
  name: StringFieldUpdateOperationsInput
  teams: TeamUpdateManyWithoutSchoolInput
  Thread: ThreadUpdateManyWithoutSchoolInput
  type: StringFieldUpdateOperationsInput
  Vote: VoteUpdateManyWithoutSchoolInput
  Voted: VotedUpdateManyWithoutSchoolInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithoutMembersInput {
  address: StringFieldUpdateOperationsInput
  ballots: BallotUpdateManyWithoutSchoolInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutSchoolsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  teams: TeamUpdateManyWithoutSchoolInput
  Thread: ThreadUpdateManyWithoutSchoolInput
  type: StringFieldUpdateOperationsInput
  Vote: VoteUpdateManyWithoutSchoolInput
  Voted: VotedUpdateManyWithoutSchoolInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithoutTeamsInput {
  address: StringFieldUpdateOperationsInput
  ballots: BallotUpdateManyWithoutSchoolInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutSchoolsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutSchoolInput
  name: StringFieldUpdateOperationsInput
  Thread: ThreadUpdateManyWithoutSchoolInput
  type: StringFieldUpdateOperationsInput
  Vote: VoteUpdateManyWithoutSchoolInput
  Voted: VotedUpdateManyWithoutSchoolInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithoutThreadInput {
  address: StringFieldUpdateOperationsInput
  ballots: BallotUpdateManyWithoutSchoolInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutSchoolsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutSchoolInput
  name: StringFieldUpdateOperationsInput
  teams: TeamUpdateManyWithoutSchoolInput
  type: StringFieldUpdateOperationsInput
  Vote: VoteUpdateManyWithoutSchoolInput
  Voted: VotedUpdateManyWithoutSchoolInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithoutVotedInput {
  address: StringFieldUpdateOperationsInput
  ballots: BallotUpdateManyWithoutSchoolInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutSchoolsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutSchoolInput
  name: StringFieldUpdateOperationsInput
  teams: TeamUpdateManyWithoutSchoolInput
  Thread: ThreadUpdateManyWithoutSchoolInput
  type: StringFieldUpdateOperationsInput
  Vote: VoteUpdateManyWithoutSchoolInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithoutVoteInput {
  address: StringFieldUpdateOperationsInput
  ballots: BallotUpdateManyWithoutSchoolInput
  canton: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutSchoolsInput
  id: StringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutSchoolInput
  name: StringFieldUpdateOperationsInput
  teams: TeamUpdateManyWithoutSchoolInput
  Thread: ThreadUpdateManyWithoutSchoolInput
  type: StringFieldUpdateOperationsInput
  Voted: VotedUpdateManyWithoutSchoolInput
  zip: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithWhereUniqueWithoutDomainInput {
  data: SchoolUpdateWithoutDomainInput!
  where: SchoolWhereUniqueInput!
}

input SchoolUpsertWithoutBallotsInput {
  create: SchoolCreateWithoutBallotsInput!
  update: SchoolUpdateWithoutBallotsInput!
}

input SchoolUpsertWithoutMembersInput {
  create: SchoolCreateWithoutMembersInput!
  update: SchoolUpdateWithoutMembersInput!
}

input SchoolUpsertWithoutTeamsInput {
  create: SchoolCreateWithoutTeamsInput!
  update: SchoolUpdateWithoutTeamsInput!
}

input SchoolUpsertWithoutThreadInput {
  create: SchoolCreateWithoutThreadInput!
  update: SchoolUpdateWithoutThreadInput!
}

input SchoolUpsertWithoutVotedInput {
  create: SchoolCreateWithoutVotedInput!
  update: SchoolUpdateWithoutVotedInput!
}

input SchoolUpsertWithoutVoteInput {
  create: SchoolCreateWithoutVoteInput!
  update: SchoolUpdateWithoutVoteInput!
}

input SchoolUpsertWithWhereUniqueWithoutDomainInput {
  create: SchoolCreateWithoutDomainInput!
  update: SchoolUpdateWithoutDomainInput!
  where: SchoolWhereUniqueInput!
}

input SchoolWhereInput {
  address: StringFilter
  AND: [SchoolWhereInput!]
  ballots: BallotListRelationFilter
  canton: StringFilter
  city: StringFilter
  domain: DomainWhereInput
  domainId: StringNullableFilter
  id: StringFilter
  members: UserListRelationFilter
  name: StringFilter
  NOT: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  teams: TeamListRelationFilter
  Thread: ThreadListRelationFilter
  type: StringFilter
  Vote: VoteListRelationFilter
  Voted: VotedListRelationFilter
  zip: StringFilter
}

input SchoolWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Swissvote {
  annahme: Int
  anr: Int
  datum: String
  kategorien: String
  poster_ja: String
  poster_nein: String
  rechtsform: Int
  stand: Int
  stichwort: String
  swissvoteslink: String
  titel_kurz_d: String
  titel_off_d: String
  volk: Int
}

type Team {
  ballots(
    after: BallotWhereUniqueInput
    before: BallotWhereUniqueInput
    first: Int
    last: Int
  ): [Ballot!]!
  code: String
  domain: Domain
  id: String!
  invite: String
  members(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
  ): [User!]!
  name: String!
  school: School!
  teacher: User!
}

input TeamCreateInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  domain: DomainCreateOneWithoutTeamInput
  id: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateManyWithoutDomainInput {
  connect: [TeamWhereUniqueInput!]
  connectOrCreate: [TeamCreateOrConnectWithoutdomainInput!]
  create: [TeamCreateWithoutDomainInput!]
}

input TeamCreateManyWithoutSchoolInput {
  connect: [TeamWhereUniqueInput!]
  connectOrCreate: [TeamCreateOrConnectWithoutschoolInput!]
  create: [TeamCreateWithoutSchoolInput!]
}

input TeamCreateManyWithoutTeacherInput {
  connect: [TeamWhereUniqueInput!]
  connectOrCreate: [TeamCreateOrConnectWithoutteacherInput!]
  create: [TeamCreateWithoutTeacherInput!]
}

input TeamCreateOneWithoutBallotRunsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutBallotRunsInput
  create: TeamCreateWithoutBallotRunsInput
}

input TeamCreateOneWithoutBallotsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutballotsInput
  create: TeamCreateWithoutBallotsInput
}

input TeamCreateOneWithoutMembersInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutmembersInput
  create: TeamCreateWithoutMembersInput
}

input TeamCreateOneWithoutThreadInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutThreadInput
  create: TeamCreateWithoutThreadInput
}

input TeamCreateOneWithoutUserInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutUserInput
  create: TeamCreateWithoutUserInput
}

input TeamCreateOneWithoutVotedInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutVotedInput
  create: TeamCreateWithoutVotedInput
}

input TeamCreateOneWithoutVoteInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutVoteInput
  create: TeamCreateWithoutVoteInput
}

input TeamCreateOrConnectWithoutBallotRunsInput {
  create: TeamCreateWithoutBallotRunsInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutballotsInput {
  create: TeamCreateWithoutBallotsInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutdomainInput {
  create: TeamCreateWithoutDomainInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutmembersInput {
  create: TeamCreateWithoutMembersInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutschoolInput {
  create: TeamCreateWithoutSchoolInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutteacherInput {
  create: TeamCreateWithoutTeacherInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutThreadInput {
  create: TeamCreateWithoutThreadInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutUserInput {
  create: TeamCreateWithoutUserInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutVotedInput {
  create: TeamCreateWithoutVotedInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutVoteInput {
  create: TeamCreateWithoutVoteInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateWithoutBallotRunsInput {
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutBallotsInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutDomainInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutMembersInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutSchoolInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutTeacherInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutThreadInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutUserInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutVotedInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Vote: VoteCreateManyWithoutTeamInput
  year: Int
}

input TeamCreateWithoutVoteInput {
  BallotRuns: BallotRunCreateManyWithoutTeamInput
  ballots: BallotCreateManyWithoutTeamInput
  code: String
  domain: DomainCreateOneWithoutTeamInput
  id: String
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
  Thread: ThreadCreateManyWithoutTeamInput
  User: UserCreateManyWithoutTeamInput
  Voted: VotedCreateManyWithoutTeamInput
  year: Int
}

input TeamListRelationFilter {
  every: TeamWhereInput
  none: TeamWhereInput
  some: TeamWhereInput
}

input TeamOrderByInput {
  code: SortOrder
  domainId: SortOrder
  id: SortOrder
  invite: SortOrder
  name: SortOrder
  schoolId: SortOrder
  teacherId: SortOrder
  year: SortOrder
}

input TeamScalarWhereInput {
  AND: [TeamScalarWhereInput!]
  code: StringNullableFilter
  domainId: StringNullableFilter
  id: StringFilter
  invite: StringNullableFilter
  name: StringFilter
  NOT: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
  schoolId: StringFilter
  teacherId: StringFilter
  year: IntNullableFilter
}

input TeamUpdateManyMutationInput {
  code: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateManyWithoutDomainInput {
  connect: [TeamWhereUniqueInput!]
  connectOrCreate: [TeamCreateOrConnectWithoutdomainInput!]
  create: [TeamCreateWithoutDomainInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutDomainInput!]
  updateMany: [TeamUpdateManyWithWhereWithoutDomainInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutDomainInput!]
}

input TeamUpdateManyWithoutSchoolInput {
  connect: [TeamWhereUniqueInput!]
  connectOrCreate: [TeamCreateOrConnectWithoutschoolInput!]
  create: [TeamCreateWithoutSchoolInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [TeamUpdateManyWithWhereWithoutSchoolInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutSchoolInput!]
}

input TeamUpdateManyWithoutTeacherInput {
  connect: [TeamWhereUniqueInput!]
  connectOrCreate: [TeamCreateOrConnectWithoutteacherInput!]
  create: [TeamCreateWithoutTeacherInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutTeacherInput!]
  updateMany: [TeamUpdateManyWithWhereWithoutTeacherInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutTeacherInput!]
}

input TeamUpdateManyWithWhereWithoutDomainInput {
  data: TeamUpdateManyMutationInput!
  where: TeamScalarWhereInput!
}

input TeamUpdateManyWithWhereWithoutSchoolInput {
  data: TeamUpdateManyMutationInput!
  where: TeamScalarWhereInput!
}

input TeamUpdateManyWithWhereWithoutTeacherInput {
  data: TeamUpdateManyMutationInput!
  where: TeamScalarWhereInput!
}

input TeamUpdateOneRequiredWithoutBallotRunsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutBallotRunsInput
  create: TeamCreateWithoutBallotRunsInput
  update: TeamUpdateWithoutBallotRunsInput
  upsert: TeamUpsertWithoutBallotRunsInput
}

input TeamUpdateOneRequiredWithoutThreadInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutThreadInput
  create: TeamCreateWithoutThreadInput
  update: TeamUpdateWithoutThreadInput
  upsert: TeamUpsertWithoutThreadInput
}

input TeamUpdateOneWithoutBallotsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutballotsInput
  create: TeamCreateWithoutBallotsInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutBallotsInput
  upsert: TeamUpsertWithoutBallotsInput
}

input TeamUpdateOneWithoutMembersInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutmembersInput
  create: TeamCreateWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutMembersInput
  upsert: TeamUpsertWithoutMembersInput
}

input TeamUpdateOneWithoutUserInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutUserInput
  create: TeamCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutUserInput
  upsert: TeamUpsertWithoutUserInput
}

input TeamUpdateOneWithoutVotedInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutVotedInput
  create: TeamCreateWithoutVotedInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutVotedInput
  upsert: TeamUpsertWithoutVotedInput
}

input TeamUpdateOneWithoutVoteInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutVoteInput
  create: TeamCreateWithoutVoteInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutVoteInput
  upsert: TeamUpsertWithoutVoteInput
}

input TeamUpdateWithoutBallotRunsInput {
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutBallotsInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutDomainInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutMembersInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutSchoolInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutTeacherInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutThreadInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutUserInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutVotedInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Vote: VoteUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutVoteInput {
  BallotRuns: BallotRunUpdateManyWithoutTeamInput
  ballots: BallotUpdateManyWithoutTeamInput
  code: NullableStringFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutTeamInput
  id: StringFieldUpdateOperationsInput
  invite: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutTeamsInput
  teacher: UserUpdateOneRequiredWithoutTeachesInput
  Thread: ThreadUpdateManyWithoutTeamInput
  User: UserUpdateManyWithoutTeamInput
  Voted: VotedUpdateManyWithoutTeamInput
  year: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithWhereUniqueWithoutDomainInput {
  data: TeamUpdateWithoutDomainInput!
  where: TeamWhereUniqueInput!
}

input TeamUpdateWithWhereUniqueWithoutSchoolInput {
  data: TeamUpdateWithoutSchoolInput!
  where: TeamWhereUniqueInput!
}

input TeamUpdateWithWhereUniqueWithoutTeacherInput {
  data: TeamUpdateWithoutTeacherInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithoutBallotRunsInput {
  create: TeamCreateWithoutBallotRunsInput!
  update: TeamUpdateWithoutBallotRunsInput!
}

input TeamUpsertWithoutBallotsInput {
  create: TeamCreateWithoutBallotsInput!
  update: TeamUpdateWithoutBallotsInput!
}

input TeamUpsertWithoutMembersInput {
  create: TeamCreateWithoutMembersInput!
  update: TeamUpdateWithoutMembersInput!
}

input TeamUpsertWithoutThreadInput {
  create: TeamCreateWithoutThreadInput!
  update: TeamUpdateWithoutThreadInput!
}

input TeamUpsertWithoutUserInput {
  create: TeamCreateWithoutUserInput!
  update: TeamUpdateWithoutUserInput!
}

input TeamUpsertWithoutVotedInput {
  create: TeamCreateWithoutVotedInput!
  update: TeamUpdateWithoutVotedInput!
}

input TeamUpsertWithoutVoteInput {
  create: TeamCreateWithoutVoteInput!
  update: TeamUpdateWithoutVoteInput!
}

input TeamUpsertWithWhereUniqueWithoutDomainInput {
  create: TeamCreateWithoutDomainInput!
  update: TeamUpdateWithoutDomainInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithWhereUniqueWithoutSchoolInput {
  create: TeamCreateWithoutSchoolInput!
  update: TeamUpdateWithoutSchoolInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithWhereUniqueWithoutTeacherInput {
  create: TeamCreateWithoutTeacherInput!
  update: TeamUpdateWithoutTeacherInput!
  where: TeamWhereUniqueInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  BallotRuns: BallotRunListRelationFilter
  ballots: BallotListRelationFilter
  code: StringNullableFilter
  domain: DomainWhereInput
  domainId: StringNullableFilter
  id: StringFilter
  invite: StringNullableFilter
  members: UserListRelationFilter
  name: StringFilter
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  school: SchoolWhereInput
  schoolId: StringFilter
  teacher: UserWhereInput
  teacherId: StringFilter
  Thread: ThreadListRelationFilter
  User: UserListRelationFilter
  Vote: VoteListRelationFilter
  Voted: VotedListRelationFilter
  year: IntNullableFilter
}

input TeamWhereUniqueInput {
  code: String
  id: String
  invite: String
}

type Thread {
  attachments(
    after: AttachmentWhereUniqueInput
    before: AttachmentWhereUniqueInput
    first: Int
    last: Int
  ): [Attachment!]!
  children: [Thread]
  createdAt: DateTime!
  id: String!
  reactions(
    after: ReactionWhereUniqueInput
    before: ReactionWhereUniqueInput
    first: Int
    last: Int
  ): [Reaction!]!
  ref: String!
  text: String!
  title: String!
  updatedAt: DateTime!
  user: User!
}

input ThreadCreateManyWithoutSchoolInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutschoolInput!]
  create: [ThreadCreateWithoutSchoolInput!]
}

input ThreadCreateManyWithoutTeamInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutteamInput!]
  create: [ThreadCreateWithoutTeamInput!]
}

input ThreadCreateManyWithoutUserInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutuserInput!]
  create: [ThreadCreateWithoutUserInput!]
}

input ThreadCreateOneWithoutAttachmentsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutattachmentsInput
  create: ThreadCreateWithoutAttachmentsInput
}

input ThreadCreateOneWithoutReactionsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutreactionsInput
  create: ThreadCreateWithoutReactionsInput
}

input ThreadCreateOrConnectWithoutattachmentsInput {
  create: ThreadCreateWithoutAttachmentsInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutreactionsInput {
  create: ThreadCreateWithoutReactionsInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutschoolInput {
  create: ThreadCreateWithoutSchoolInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutteamInput {
  create: ThreadCreateWithoutTeamInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutuserInput {
  create: ThreadCreateWithoutUserInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateWithoutAttachmentsInput {
  createdAt: DateTime
  id: String
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String!
  school: SchoolCreateOneWithoutThreadInput
  team: TeamCreateOneWithoutThreadInput!
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutReactionsInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  createdAt: DateTime
  id: String
  ref: String!
  school: SchoolCreateOneWithoutThreadInput
  team: TeamCreateOneWithoutThreadInput!
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutSchoolInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  createdAt: DateTime
  id: String
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String!
  team: TeamCreateOneWithoutThreadInput!
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutTeamInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  createdAt: DateTime
  id: String
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String!
  school: SchoolCreateOneWithoutThreadInput
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutUserInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  createdAt: DateTime
  id: String
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String!
  school: SchoolCreateOneWithoutThreadInput
  team: TeamCreateOneWithoutThreadInput!
  text: String
  title: String
  updatedAt: DateTime
}

input ThreadListRelationFilter {
  every: ThreadWhereInput
  none: ThreadWhereInput
  some: ThreadWhereInput
}

input ThreadScalarWhereInput {
  AND: [ThreadScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ThreadScalarWhereInput!]
  OR: [ThreadScalarWhereInput!]
  ref: StringFilter
  schoolId: StringNullableFilter
  teamId: StringFilter
  text: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ThreadUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ref: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadUpdateManyWithoutSchoolInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutschoolInput!]
  create: [ThreadCreateWithoutSchoolInput!]
  delete: [ThreadWhereUniqueInput!]
  deleteMany: [ThreadScalarWhereInput!]
  disconnect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [ThreadUpdateManyWithWhereWithoutSchoolInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutSchoolInput!]
}

input ThreadUpdateManyWithoutTeamInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutteamInput!]
  create: [ThreadCreateWithoutTeamInput!]
  delete: [ThreadWhereUniqueInput!]
  deleteMany: [ThreadScalarWhereInput!]
  disconnect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [ThreadUpdateManyWithWhereWithoutTeamInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutTeamInput!]
}

input ThreadUpdateManyWithoutUserInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutuserInput!]
  create: [ThreadCreateWithoutUserInput!]
  delete: [ThreadWhereUniqueInput!]
  deleteMany: [ThreadScalarWhereInput!]
  disconnect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ThreadUpdateManyWithWhereWithoutUserInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutUserInput!]
}

input ThreadUpdateManyWithWhereWithoutSchoolInput {
  data: ThreadUpdateManyMutationInput!
  where: ThreadScalarWhereInput!
}

input ThreadUpdateManyWithWhereWithoutTeamInput {
  data: ThreadUpdateManyMutationInput!
  where: ThreadScalarWhereInput!
}

input ThreadUpdateManyWithWhereWithoutUserInput {
  data: ThreadUpdateManyMutationInput!
  where: ThreadScalarWhereInput!
}

input ThreadUpdateOneWithoutAttachmentsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutattachmentsInput
  create: ThreadCreateWithoutAttachmentsInput
  delete: Boolean
  disconnect: Boolean
  update: ThreadUpdateWithoutAttachmentsInput
  upsert: ThreadUpsertWithoutAttachmentsInput
}

input ThreadUpdateOneWithoutReactionsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutreactionsInput
  create: ThreadCreateWithoutReactionsInput
  delete: Boolean
  disconnect: Boolean
  update: ThreadUpdateWithoutReactionsInput
  upsert: ThreadUpsertWithoutReactionsInput
}

input ThreadUpdateWithoutAttachmentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutThreadInput
  ref: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutThreadInput
  team: TeamUpdateOneRequiredWithoutThreadInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateWithoutReactionsInput {
  attachments: AttachmentUpdateManyWithoutThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ref: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutThreadInput
  team: TeamUpdateOneRequiredWithoutThreadInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateWithoutSchoolInput {
  attachments: AttachmentUpdateManyWithoutThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutThreadInput
  ref: StringFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutThreadInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateWithoutTeamInput {
  attachments: AttachmentUpdateManyWithoutThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutThreadInput
  ref: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutThreadInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateWithoutUserInput {
  attachments: AttachmentUpdateManyWithoutThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutThreadInput
  ref: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutThreadInput
  team: TeamUpdateOneRequiredWithoutThreadInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadUpdateWithWhereUniqueWithoutSchoolInput {
  data: ThreadUpdateWithoutSchoolInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpdateWithWhereUniqueWithoutTeamInput {
  data: ThreadUpdateWithoutTeamInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpdateWithWhereUniqueWithoutUserInput {
  data: ThreadUpdateWithoutUserInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithoutAttachmentsInput {
  create: ThreadCreateWithoutAttachmentsInput!
  update: ThreadUpdateWithoutAttachmentsInput!
}

input ThreadUpsertWithoutReactionsInput {
  create: ThreadCreateWithoutReactionsInput!
  update: ThreadUpdateWithoutReactionsInput!
}

input ThreadUpsertWithWhereUniqueWithoutSchoolInput {
  create: ThreadCreateWithoutSchoolInput!
  update: ThreadUpdateWithoutSchoolInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithWhereUniqueWithoutTeamInput {
  create: ThreadCreateWithoutTeamInput!
  update: ThreadUpdateWithoutTeamInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithWhereUniqueWithoutUserInput {
  create: ThreadCreateWithoutUserInput!
  update: ThreadUpdateWithoutUserInput!
  where: ThreadWhereUniqueInput!
}

input ThreadWhereInput {
  AND: [ThreadWhereInput!]
  attachments: AttachmentListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  reactions: ReactionListRelationFilter
  ref: StringFilter
  school: SchoolWhereInput
  schoolId: StringNullableFilter
  team: TeamWhereInput
  teamId: StringFilter
  text: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ThreadWhereUniqueInput {
  id: String
}

type User {
  attachments(
    after: AttachmentWhereUniqueInput
    before: AttachmentWhereUniqueInput
    first: Int
    last: Int
  ): [Attachment!]!
  ballots(
    after: BallotWhereUniqueInput
    before: BallotWhereUniqueInput
    first: Int
    last: Int
  ): [Ballot!]!
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String!
  image: String
  lastname: String
  name: String
  reactions(
    after: ReactionWhereUniqueInput
    before: ReactionWhereUniqueInput
    first: Int
    last: Int
  ): [Reaction!]!
  role: Role!
  school: School
  shortname: String
  teaches(
    after: TeamWhereUniqueInput
    before: TeamWhereUniqueInput
    first: Int
    last: Int
  ): [Team!]!
  team: Team
  threads(
    after: ThreadWhereUniqueInput
    before: ThreadWhereUniqueInput
    first: Int
    last: Int
  ): [Thread!]!
  year: Int
}

input UserCreateInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateManyWithoutSchoolInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutschoolInput!]
  create: [UserCreateWithoutSchoolInput!]
}

input UserCreateManyWithoutTeamInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutTeamInput!]
  create: [UserCreateWithoutTeamInput!]
}

input UserCreateOneWithoutAttachmentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutattachmentsInput
  create: UserCreateWithoutAttachmentsInput
}

input UserCreateOneWithoutBallotsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutballotsInput
  create: UserCreateWithoutBallotsInput
}

input UserCreateOneWithoutReactionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutreactionsInput
  create: UserCreateWithoutReactionsInput
}

input UserCreateOneWithoutTeachesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutteachesInput
  create: UserCreateWithoutTeachesInput
}

input UserCreateOneWithoutThreadsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutthreadsInput
  create: UserCreateWithoutThreadsInput
}

input UserCreateOneWithoutVotedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutvotedInput
  create: UserCreateWithoutVotedInput
}

input UserCreateOrConnectWithoutattachmentsInput {
  create: UserCreateWithoutAttachmentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutballotsInput {
  create: UserCreateWithoutBallotsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutreactionsInput {
  create: UserCreateWithoutReactionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutschoolInput {
  create: UserCreateWithoutSchoolInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutteachesInput {
  create: UserCreateWithoutTeachesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTeamInput {
  create: UserCreateWithoutTeamInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutthreadsInput {
  create: UserCreateWithoutThreadsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutvotedInput {
  create: UserCreateWithoutVotedInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAttachmentsInput {
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateWithoutBallotsInput {
  attachments: AttachmentCreateManyWithoutUserInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateWithoutReactionsInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateWithoutSchoolInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateWithoutTeachesInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateWithoutTeamInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateWithoutThreadsInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
  year: Int
}

input UserCreateWithoutVotedInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  canton: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  id: String
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutUserInput
  Team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  year: Int
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  canton: SortOrder
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  gender: SortOrder
  id: SortOrder
  image: SortOrder
  lastname: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  schoolId: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
  year: SortOrder
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  canton: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  gender: EnumGenderNullableFilter
  id: StringFilter
  image: StringNullableFilter
  lastname: StringNullableFilter
  name: StringNullableFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringNullableFilter
  role: EnumRoleFilter
  schoolId: StringNullableFilter
  teamId: StringNullableFilter
  updatedAt: DateTimeFilter
  verified: BoolNullableFilter
  year: IntNullableFilter
}

input UserUpdateInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateManyWithoutSchoolInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutschoolInput!]
  create: [UserCreateWithoutSchoolInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [UserUpdateManyWithWhereWithoutSchoolInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSchoolInput!]
}

input UserUpdateManyWithoutTeamInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutTeamInput!]
  create: [UserCreateWithoutTeamInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [UserUpdateManyWithWhereWithoutTeamInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamInput!]
}

input UserUpdateManyWithWhereWithoutSchoolInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutTeamInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutAttachmentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutattachmentsInput
  create: UserCreateWithoutAttachmentsInput
  update: UserUpdateWithoutAttachmentsInput
  upsert: UserUpsertWithoutAttachmentsInput
}

input UserUpdateOneRequiredWithoutReactionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutreactionsInput
  create: UserCreateWithoutReactionsInput
  update: UserUpdateWithoutReactionsInput
  upsert: UserUpsertWithoutReactionsInput
}

input UserUpdateOneRequiredWithoutTeachesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutteachesInput
  create: UserCreateWithoutTeachesInput
  update: UserUpdateWithoutTeachesInput
  upsert: UserUpsertWithoutTeachesInput
}

input UserUpdateOneRequiredWithoutThreadsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutthreadsInput
  create: UserCreateWithoutThreadsInput
  update: UserUpdateWithoutThreadsInput
  upsert: UserUpsertWithoutThreadsInput
}

input UserUpdateOneRequiredWithoutVotedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutvotedInput
  create: UserCreateWithoutVotedInput
  update: UserUpdateWithoutVotedInput
  upsert: UserUpsertWithoutVotedInput
}

input UserUpdateOneWithoutBallotsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutballotsInput
  create: UserCreateWithoutBallotsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutBallotsInput
  upsert: UserUpsertWithoutBallotsInput
}

input UserUpdateWithoutAttachmentsInput {
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutBallotsInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutReactionsInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutSchoolInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutTeachesInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutTeamInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutThreadsInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  voted: VotedUpdateManyWithoutUserInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutVotedInput {
  attachments: AttachmentUpdateManyWithoutUserInput
  ballots: BallotUpdateManyWithoutCreatorInput
  canton: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reactions: ReactionUpdateManyWithoutUserInput
  role: EnumRoleFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutMembersInput
  teaches: TeamUpdateManyWithoutTeacherInput
  team: TeamUpdateOneWithoutUserInput
  Team: TeamUpdateOneWithoutMembersInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: NullableBoolFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutSchoolInput {
  data: UserUpdateWithoutSchoolInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutTeamInput {
  data: UserUpdateWithoutTeamInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAttachmentsInput {
  create: UserCreateWithoutAttachmentsInput!
  update: UserUpdateWithoutAttachmentsInput!
}

input UserUpsertWithoutBallotsInput {
  create: UserCreateWithoutBallotsInput!
  update: UserUpdateWithoutBallotsInput!
}

input UserUpsertWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput!
  update: UserUpdateWithoutReactionsInput!
}

input UserUpsertWithoutTeachesInput {
  create: UserCreateWithoutTeachesInput!
  update: UserUpdateWithoutTeachesInput!
}

input UserUpsertWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput!
  update: UserUpdateWithoutThreadsInput!
}

input UserUpsertWithoutVotedInput {
  create: UserCreateWithoutVotedInput!
  update: UserUpdateWithoutVotedInput!
}

input UserUpsertWithWhereUniqueWithoutSchoolInput {
  create: UserCreateWithoutSchoolInput!
  update: UserUpdateWithoutSchoolInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutTeamInput {
  create: UserCreateWithoutTeamInput!
  update: UserUpdateWithoutTeamInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  attachments: AttachmentListRelationFilter
  ballots: BallotListRelationFilter
  canton: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  gender: EnumGenderNullableFilter
  id: StringFilter
  image: StringNullableFilter
  lastname: StringNullableFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringNullableFilter
  reactions: ReactionListRelationFilter
  role: EnumRoleFilter
  school: SchoolWhereInput
  schoolId: StringNullableFilter
  teaches: TeamListRelationFilter
  team: TeamWhereInput
  Team: TeamWhereInput
  teamId: StringNullableFilter
  threads: ThreadListRelationFilter
  updatedAt: DateTimeFilter
  verified: BoolNullableFilter
  voted: VotedListRelationFilter
  year: IntNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type Vote {
  ballot: Ballot!
  verify: String
}

input VoteCreateManyWithoutBallotInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutballotInput!]
  create: [VoteCreateWithoutBallotInput!]
}

input VoteCreateManyWithoutBallotRunInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutballotRunInput!]
  create: [VoteCreateWithoutBallotRunInput!]
}

input VoteCreateManyWithoutSchoolInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutschoolInput!]
  create: [VoteCreateWithoutSchoolInput!]
}

input VoteCreateManyWithoutTeamInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutteamInput!]
  create: [VoteCreateWithoutTeamInput!]
}

input VoteCreateOrConnectWithoutballotInput {
  create: VoteCreateWithoutBallotInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateOrConnectWithoutballotRunInput {
  create: VoteCreateWithoutBallotRunInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateOrConnectWithoutschoolInput {
  create: VoteCreateWithoutSchoolInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateOrConnectWithoutteamInput {
  create: VoteCreateWithoutTeamInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateWithoutBallotInput {
  ballotRun: BallotRunCreateOneWithoutVoteInput
  canton: String
  id: String
  school: SchoolCreateOneWithoutVoteInput
  schooltype: String
  team: TeamCreateOneWithoutVoteInput
  verify: String
  vote: Int!
  year: Int
}

input VoteCreateWithoutBallotRunInput {
  ballot: BallotCreateOneWithoutVotesInput!
  canton: String
  id: String
  school: SchoolCreateOneWithoutVoteInput
  schooltype: String
  team: TeamCreateOneWithoutVoteInput
  verify: String
  vote: Int!
  year: Int
}

input VoteCreateWithoutSchoolInput {
  ballot: BallotCreateOneWithoutVotesInput!
  ballotRun: BallotRunCreateOneWithoutVoteInput
  canton: String
  id: String
  schooltype: String
  team: TeamCreateOneWithoutVoteInput
  verify: String
  vote: Int!
  year: Int
}

input VoteCreateWithoutTeamInput {
  ballot: BallotCreateOneWithoutVotesInput!
  ballotRun: BallotRunCreateOneWithoutVoteInput
  canton: String
  id: String
  school: SchoolCreateOneWithoutVoteInput
  schooltype: String
  verify: String
  vote: Int!
  year: Int
}

input VotedCreateManyWithoutBallotInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutballotInput!]
  create: [VotedCreateWithoutBallotInput!]
}

input VotedCreateManyWithoutSchoolInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutschoolInput!]
  create: [VotedCreateWithoutSchoolInput!]
}

input VotedCreateManyWithoutTeamInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutteamInput!]
  create: [VotedCreateWithoutTeamInput!]
}

input VotedCreateManyWithoutUserInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutuserInput!]
  create: [VotedCreateWithoutUserInput!]
}

input VotedCreateOrConnectWithoutballotInput {
  create: VotedCreateWithoutBallotInput!
  where: VotedWhereUniqueInput!
}

input VotedCreateOrConnectWithoutschoolInput {
  create: VotedCreateWithoutSchoolInput!
  where: VotedWhereUniqueInput!
}

input VotedCreateOrConnectWithoutteamInput {
  create: VotedCreateWithoutTeamInput!
  where: VotedWhereUniqueInput!
}

input VotedCreateOrConnectWithoutuserInput {
  create: VotedCreateWithoutUserInput!
  where: VotedWhereUniqueInput!
}

input VotedCreateWithoutBallotInput {
  id: String
  school: SchoolCreateOneWithoutVotedInput
  signature: String
  team: TeamCreateOneWithoutVotedInput
  user: UserCreateOneWithoutVotedInput!
}

input VotedCreateWithoutSchoolInput {
  ballot: BallotCreateOneWithoutVotedInput!
  id: String
  signature: String
  team: TeamCreateOneWithoutVotedInput
  user: UserCreateOneWithoutVotedInput!
}

input VotedCreateWithoutTeamInput {
  ballot: BallotCreateOneWithoutVotedInput!
  id: String
  school: SchoolCreateOneWithoutVotedInput
  signature: String
  user: UserCreateOneWithoutVotedInput!
}

input VotedCreateWithoutUserInput {
  ballot: BallotCreateOneWithoutVotedInput!
  id: String
  school: SchoolCreateOneWithoutVotedInput
  signature: String
  team: TeamCreateOneWithoutVotedInput
}

input VotedListRelationFilter {
  every: VotedWhereInput
  none: VotedWhereInput
  some: VotedWhereInput
}

input VotedScalarWhereInput {
  AND: [VotedScalarWhereInput!]
  ballotId: StringFilter
  id: StringFilter
  NOT: [VotedScalarWhereInput!]
  OR: [VotedScalarWhereInput!]
  schoolId: StringNullableFilter
  signature: StringNullableFilter
  teamId: StringNullableFilter
  userId: StringFilter
}

input VotedUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  signature: NullableStringFieldUpdateOperationsInput
}

input VotedUpdateManyWithoutBallotInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutballotInput!]
  create: [VotedCreateWithoutBallotInput!]
  delete: [VotedWhereUniqueInput!]
  deleteMany: [VotedScalarWhereInput!]
  disconnect: [VotedWhereUniqueInput!]
  set: [VotedWhereUniqueInput!]
  update: [VotedUpdateWithWhereUniqueWithoutBallotInput!]
  updateMany: [VotedUpdateManyWithWhereWithoutBallotInput!]
  upsert: [VotedUpsertWithWhereUniqueWithoutBallotInput!]
}

input VotedUpdateManyWithoutSchoolInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutschoolInput!]
  create: [VotedCreateWithoutSchoolInput!]
  delete: [VotedWhereUniqueInput!]
  deleteMany: [VotedScalarWhereInput!]
  disconnect: [VotedWhereUniqueInput!]
  set: [VotedWhereUniqueInput!]
  update: [VotedUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [VotedUpdateManyWithWhereWithoutSchoolInput!]
  upsert: [VotedUpsertWithWhereUniqueWithoutSchoolInput!]
}

input VotedUpdateManyWithoutTeamInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutteamInput!]
  create: [VotedCreateWithoutTeamInput!]
  delete: [VotedWhereUniqueInput!]
  deleteMany: [VotedScalarWhereInput!]
  disconnect: [VotedWhereUniqueInput!]
  set: [VotedWhereUniqueInput!]
  update: [VotedUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [VotedUpdateManyWithWhereWithoutTeamInput!]
  upsert: [VotedUpsertWithWhereUniqueWithoutTeamInput!]
}

input VotedUpdateManyWithoutUserInput {
  connect: [VotedWhereUniqueInput!]
  connectOrCreate: [VotedCreateOrConnectWithoutuserInput!]
  create: [VotedCreateWithoutUserInput!]
  delete: [VotedWhereUniqueInput!]
  deleteMany: [VotedScalarWhereInput!]
  disconnect: [VotedWhereUniqueInput!]
  set: [VotedWhereUniqueInput!]
  update: [VotedUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VotedUpdateManyWithWhereWithoutUserInput!]
  upsert: [VotedUpsertWithWhereUniqueWithoutUserInput!]
}

input VotedUpdateManyWithWhereWithoutBallotInput {
  data: VotedUpdateManyMutationInput!
  where: VotedScalarWhereInput!
}

input VotedUpdateManyWithWhereWithoutSchoolInput {
  data: VotedUpdateManyMutationInput!
  where: VotedScalarWhereInput!
}

input VotedUpdateManyWithWhereWithoutTeamInput {
  data: VotedUpdateManyMutationInput!
  where: VotedScalarWhereInput!
}

input VotedUpdateManyWithWhereWithoutUserInput {
  data: VotedUpdateManyMutationInput!
  where: VotedScalarWhereInput!
}

input VotedUpdateWithoutBallotInput {
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutVotedInput
  signature: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutVotedInput
  user: UserUpdateOneRequiredWithoutVotedInput
}

input VotedUpdateWithoutSchoolInput {
  ballot: BallotUpdateOneRequiredWithoutVotedInput
  id: StringFieldUpdateOperationsInput
  signature: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutVotedInput
  user: UserUpdateOneRequiredWithoutVotedInput
}

input VotedUpdateWithoutTeamInput {
  ballot: BallotUpdateOneRequiredWithoutVotedInput
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutVotedInput
  signature: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotedInput
}

input VotedUpdateWithoutUserInput {
  ballot: BallotUpdateOneRequiredWithoutVotedInput
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutVotedInput
  signature: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutVotedInput
}

input VotedUpdateWithWhereUniqueWithoutBallotInput {
  data: VotedUpdateWithoutBallotInput!
  where: VotedWhereUniqueInput!
}

input VotedUpdateWithWhereUniqueWithoutSchoolInput {
  data: VotedUpdateWithoutSchoolInput!
  where: VotedWhereUniqueInput!
}

input VotedUpdateWithWhereUniqueWithoutTeamInput {
  data: VotedUpdateWithoutTeamInput!
  where: VotedWhereUniqueInput!
}

input VotedUpdateWithWhereUniqueWithoutUserInput {
  data: VotedUpdateWithoutUserInput!
  where: VotedWhereUniqueInput!
}

input VotedUpsertWithWhereUniqueWithoutBallotInput {
  create: VotedCreateWithoutBallotInput!
  update: VotedUpdateWithoutBallotInput!
  where: VotedWhereUniqueInput!
}

input VotedUpsertWithWhereUniqueWithoutSchoolInput {
  create: VotedCreateWithoutSchoolInput!
  update: VotedUpdateWithoutSchoolInput!
  where: VotedWhereUniqueInput!
}

input VotedUpsertWithWhereUniqueWithoutTeamInput {
  create: VotedCreateWithoutTeamInput!
  update: VotedUpdateWithoutTeamInput!
  where: VotedWhereUniqueInput!
}

input VotedUpsertWithWhereUniqueWithoutUserInput {
  create: VotedCreateWithoutUserInput!
  update: VotedUpdateWithoutUserInput!
  where: VotedWhereUniqueInput!
}

input VotedWhereInput {
  AND: [VotedWhereInput!]
  ballot: BallotWhereInput
  ballotId: StringFilter
  id: StringFilter
  NOT: [VotedWhereInput!]
  OR: [VotedWhereInput!]
  school: SchoolWhereInput
  schoolId: StringNullableFilter
  signature: StringNullableFilter
  team: TeamWhereInput
  teamId: StringNullableFilter
  user: UserWhereInput
  userId: StringFilter
}

input VotedWhereUniqueInput {
  id: String
}

input VoteListRelationFilter {
  every: VoteWhereInput
  none: VoteWhereInput
  some: VoteWhereInput
}

input VoteScalarWhereInput {
  AND: [VoteScalarWhereInput!]
  ballotId: StringFilter
  ballotRunId: StringNullableFilter
  canton: StringNullableFilter
  id: StringFilter
  NOT: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  schoolId: StringNullableFilter
  schooltype: StringNullableFilter
  teamId: StringNullableFilter
  verify: StringNullableFilter
  vote: IntFilter
  year: IntNullableFilter
}

input VoteUpdateManyMutationInput {
  canton: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schooltype: NullableStringFieldUpdateOperationsInput
  verify: NullableStringFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input VoteUpdateManyWithoutBallotInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutballotInput!]
  create: [VoteCreateWithoutBallotInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutBallotInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutBallotInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutBallotInput!]
}

input VoteUpdateManyWithoutBallotRunInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutballotRunInput!]
  create: [VoteCreateWithoutBallotRunInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutBallotRunInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutBallotRunInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutBallotRunInput!]
}

input VoteUpdateManyWithoutSchoolInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutschoolInput!]
  create: [VoteCreateWithoutSchoolInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutSchoolInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutSchoolInput!]
}

input VoteUpdateManyWithoutTeamInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutteamInput!]
  create: [VoteCreateWithoutTeamInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutTeamInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutTeamInput!]
}

input VoteUpdateManyWithWhereWithoutBallotInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateManyWithWhereWithoutBallotRunInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateManyWithWhereWithoutSchoolInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateManyWithWhereWithoutTeamInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateWithoutBallotInput {
  ballotRun: BallotRunUpdateOneWithoutVoteInput
  canton: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutVoteInput
  schooltype: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutVoteInput
  verify: NullableStringFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input VoteUpdateWithoutBallotRunInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  canton: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutVoteInput
  schooltype: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutVoteInput
  verify: NullableStringFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input VoteUpdateWithoutSchoolInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  ballotRun: BallotRunUpdateOneWithoutVoteInput
  canton: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  schooltype: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutVoteInput
  verify: NullableStringFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input VoteUpdateWithoutTeamInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  ballotRun: BallotRunUpdateOneWithoutVoteInput
  canton: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneWithoutVoteInput
  schooltype: NullableStringFieldUpdateOperationsInput
  verify: NullableStringFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
  year: NullableIntFieldUpdateOperationsInput
}

input VoteUpdateWithWhereUniqueWithoutBallotInput {
  data: VoteUpdateWithoutBallotInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithWhereUniqueWithoutBallotRunInput {
  data: VoteUpdateWithoutBallotRunInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithWhereUniqueWithoutSchoolInput {
  data: VoteUpdateWithoutSchoolInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithWhereUniqueWithoutTeamInput {
  data: VoteUpdateWithoutTeamInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutBallotInput {
  create: VoteCreateWithoutBallotInput!
  update: VoteUpdateWithoutBallotInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutBallotRunInput {
  create: VoteCreateWithoutBallotRunInput!
  update: VoteUpdateWithoutBallotRunInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutSchoolInput {
  create: VoteCreateWithoutSchoolInput!
  update: VoteUpdateWithoutSchoolInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutTeamInput {
  create: VoteCreateWithoutTeamInput!
  update: VoteUpdateWithoutTeamInput!
  where: VoteWhereUniqueInput!
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  ballot: BallotWhereInput
  ballotId: StringFilter
  ballotRun: BallotRunWhereInput
  ballotRunId: StringNullableFilter
  canton: StringNullableFilter
  id: StringFilter
  NOT: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  school: SchoolWhereInput
  schoolId: StringNullableFilter
  schooltype: StringNullableFilter
  team: TeamWhereInput
  teamId: StringNullableFilter
  verify: StringNullableFilter
  vote: IntFilter
  year: IntNullableFilter
}

input VoteWhereUniqueInput {
  id: String
}
