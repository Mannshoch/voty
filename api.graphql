### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Attachment {
  createdAt: DateTime!
  file: String!
  id: Int!
  updatedAt: DateTime!
  user: User!
}

input AttachmentCreateManyWithoutBallotInput {
  connect: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateWithoutBallotInput!]
}

input AttachmentCreateManyWithoutThreadInput {
  connect: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateWithoutThreadInput!]
}

input AttachmentCreateManyWithoutUserInput {
  connect: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateWithoutUserInput!]
}

input AttachmentCreateWithoutBallotInput {
  createdAt: DateTime
  file: String!
  thread: ThreadCreateOneWithoutAttachmentsInput
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutAttachmentsInput!
}

input AttachmentCreateWithoutThreadInput {
  ballot: BallotCreateOneWithoutAttachmentsInput
  createdAt: DateTime
  file: String!
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutAttachmentsInput!
}

input AttachmentCreateWithoutUserInput {
  ballot: BallotCreateOneWithoutAttachmentsInput
  createdAt: DateTime
  file: String!
  thread: ThreadCreateOneWithoutAttachmentsInput
  title: String
  updatedAt: DateTime
}

input AttachmentListRelationFilter {
  every: AttachmentWhereInput
  none: AttachmentWhereInput
  some: AttachmentWhereInput
}

input AttachmentWhereInput {
  AND: [AttachmentWhereInput!]
  ballot: BallotWhereInput
  ballotId: IntNullableFilter
  createdAt: DateTimeFilter
  file: StringFilter
  id: IntFilter
  NOT: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  thread: ThreadWhereInput
  threadId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input AttachmentWhereUniqueInput {
  id: Int
}

type Ballot {
  canton: String
  createdAt: DateTime!
  creator: User
  description: String!
  end: DateTime!
  id: Int!
  school: School
  scope: Scope!
  start: DateTime!
  title: String!
  updatedAt: DateTime!
}

input BallotCreateManyWithoutCreatorInput {
  connect: [BallotWhereUniqueInput!]
  create: [BallotCreateWithoutCreatorInput!]
}

input BallotCreateManyWithoutSchoolInput {
  connect: [BallotWhereUniqueInput!]
  create: [BallotCreateWithoutSchoolInput!]
}

input BallotCreateManyWithoutTeamInput {
  connect: [BallotWhereUniqueInput!]
  create: [BallotCreateWithoutTeamInput!]
}

input BallotCreateOneWithoutAttachmentsInput {
  connect: BallotWhereUniqueInput
  create: BallotCreateWithoutAttachmentsInput
}

input BallotCreateOneWithoutThreadInput {
  connect: BallotWhereUniqueInput
  create: BallotCreateWithoutThreadInput
}

input BallotCreateOneWithoutVotedInput {
  connect: BallotWhereUniqueInput
  create: BallotCreateWithoutVotedInput
}

input BallotCreateWithoutAttachmentsInput {
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  options: OptionsCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: Scope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  thread: ThreadCreateOneWithoutBallotInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VotesCreateManyWithoutBallotInput
}

input BallotCreateWithoutCreatorInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  canton: String
  createdAt: DateTime
  description: String!
  end: DateTime!
  options: OptionsCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: Scope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  thread: ThreadCreateOneWithoutBallotInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VotesCreateManyWithoutBallotInput
}

input BallotCreateWithoutSchoolInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  options: OptionsCreateManyWithoutBallotInput
  scope: Scope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  thread: ThreadCreateOneWithoutBallotInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VotesCreateManyWithoutBallotInput
}

input BallotCreateWithoutTeamInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  options: OptionsCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: Scope
  start: DateTime!
  thread: ThreadCreateOneWithoutBallotInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VotesCreateManyWithoutBallotInput
}

input BallotCreateWithoutThreadInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  options: OptionsCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: Scope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  title: String!
  updatedAt: DateTime
  voted: VotedCreateManyWithoutBallotInput
  votes: VotesCreateManyWithoutBallotInput
}

input BallotCreateWithoutVotedInput {
  attachments: AttachmentCreateManyWithoutBallotInput
  canton: String
  createdAt: DateTime
  creator: UserCreateOneWithoutBallotsInput
  description: String!
  end: DateTime!
  options: OptionsCreateManyWithoutBallotInput
  school: SchoolCreateOneWithoutBallotsInput
  scope: Scope
  start: DateTime!
  team: TeamCreateOneWithoutBallotsInput
  thread: ThreadCreateOneWithoutBallotInput
  title: String!
  updatedAt: DateTime
  votes: VotesCreateManyWithoutBallotInput
}

input BallotListRelationFilter {
  every: BallotWhereInput
  none: BallotWhereInput
  some: BallotWhereInput
}

input BallotOrderByInput {
  canton: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  description: SortOrder
  end: SortOrder
  id: SortOrder
  schoolId: SortOrder
  scope: SortOrder
  start: SortOrder
  teamId: SortOrder
  threadId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input BallotWhereInput {
  AND: [BallotWhereInput!]
  attachments: AttachmentListRelationFilter
  canton: StringNullableFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: IntNullableFilter
  description: StringFilter
  end: DateTimeFilter
  id: IntFilter
  NOT: [BallotWhereInput!]
  options: OptionsListRelationFilter
  OR: [BallotWhereInput!]
  school: SchoolWhereInput
  schoolId: IntNullableFilter
  scope: Scope
  start: DateTimeFilter
  team: TeamWhereInput
  teamId: IntNullableFilter
  thread: ThreadWhereInput
  threadId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  voted: VotedListRelationFilter
  votes: VotesListRelationFilter
}

input BallotWhereUniqueInput {
  id: Int
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Domain {
  approved: Boolean!
  id: Int!
  name: String!
  schools(after: SchoolWhereUniqueInput, before: SchoolWhereUniqueInput, first: Int, last: Int): [School!]!
}

input DomainCreateOneWithoutSchoolsInput {
  connect: DomainWhereUniqueInput
  create: DomainCreateWithoutSchoolsInput
}

input DomainCreateOneWithoutTeamInput {
  connect: DomainWhereUniqueInput
  create: DomainCreateWithoutTeamInput
}

input DomainCreateWithoutSchoolsInput {
  approved: Boolean
  name: String!
  Team: TeamCreateManyWithoutDomainInput
}

input DomainCreateWithoutTeamInput {
  approved: Boolean
  name: String!
  schools: SchoolCreateManyWithoutDomainInput
}

input DomainWhereInput {
  AND: [DomainWhereInput!]
  approved: BoolFilter
  id: IntFilter
  name: StringFilter
  NOT: [DomainWhereInput!]
  OR: [DomainWhereInput!]
  schools: SchoolListRelationFilter
  Team: TeamListRelationFilter
}

input DomainWhereUniqueInput {
  id: Int
  name: String
}

enum Gender {
  FEMALE
  MALE
  OTHER
  UNKOWN
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  acceptInvite(invite: String): Team
  changePassword(password: String): ResponseLogin
  checkVerification(token: String): ResponseLogin
  createInvitedUser(email: String, invite: String, lastname: String, name: String, password: String): User
  createOneSchool(data: SchoolCreateInput!): School!
  createOneTeam(data: TeamCreateInput!): Team!
  createUser(data: UserCreateInput!): User!
  deleteOneSchool(where: SchoolWhereUniqueInput!): School
  deleteOneTeam(where: TeamWhereUniqueInput!): Team
  emailVerification(email: String, purpose: String): ResponseLogin
  login(email: String, password: String): ResponseLogin
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input OptionsCreateManyWithoutBallotInput {
  connect: [OptionsWhereUniqueInput!]
  create: [OptionsCreateWithoutBallotInput!]
}

input OptionsCreateWithoutBallotInput {
  title: String!
  vote: Int!
}

input OptionsListRelationFilter {
  every: OptionsWhereInput
  none: OptionsWhereInput
  some: OptionsWhereInput
}

input OptionsWhereInput {
  AND: [OptionsWhereInput!]
  ballot: BallotWhereInput
  ballotId: IntFilter
  id: IntFilter
  NOT: [OptionsWhereInput!]
  OR: [OptionsWhereInput!]
  title: StringFilter
  vote: IntFilter
}

input OptionsWhereUniqueInput {
  id: Int
}

type Query {
  ballot(where: BallotWhereUniqueInput!): Ballot
  ballots(after: BallotWhereUniqueInput, before: BallotWhereUniqueInput, first: Int, last: Int, orderBy: [BallotOrderByInput!], where: BallotWhereInput): [Ballot!]!
  me: User
  school(where: SchoolWhereUniqueInput!): School
  schools(after: SchoolWhereUniqueInput, before: SchoolWhereUniqueInput, first: Int, last: Int, orderBy: [SchoolOrderByInput!], where: SchoolWhereInput): [School!]!
  team(where: TeamWhereUniqueInput!): Team
  teams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int, orderBy: [TeamOrderByInput!], where: TeamWhereInput): [Team!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

type Reaction {
  emoij: String!
  id: Int!
  thread: Thread
  user: User!
}

input ReactionCreateManyWithoutThreadInput {
  connect: [ReactionWhereUniqueInput!]
  create: [ReactionCreateWithoutThreadInput!]
}

input ReactionCreateManyWithoutUserInput {
  connect: [ReactionWhereUniqueInput!]
  create: [ReactionCreateWithoutUserInput!]
}

input ReactionCreateWithoutThreadInput {
  createdAt: DateTime
  emoij: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutReactionsInput!
}

input ReactionCreateWithoutUserInput {
  createdAt: DateTime
  emoij: String!
  thread: ThreadCreateOneWithoutReactionsInput
  updatedAt: DateTime
}

input ReactionListRelationFilter {
  every: ReactionWhereInput
  none: ReactionWhereInput
  some: ReactionWhereInput
}

input ReactionWhereInput {
  AND: [ReactionWhereInput!]
  createdAt: DateTimeFilter
  emoij: StringFilter
  id: IntFilter
  NOT: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  thread: ThreadWhereInput
  threadId: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input ReactionWhereUniqueInput {
  id: Int
}

type ResponseLogin {
  token: String
  user: User
}

enum Role {
  ADMIN
  PRINCIPAL
  STUDENT
  TEACHER
  USER
}

type School {
  address: String!
  canton: String!
  city: String!
  id: Int!
  members(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  name: String!
  teams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int): [Team!]!
  zip: String!
}

input SchoolCreateInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateManyWithoutDomainInput {
  connect: [SchoolWhereUniqueInput!]
  create: [SchoolCreateWithoutDomainInput!]
}

input SchoolCreateOneWithoutBallotsInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutBallotsInput
}

input SchoolCreateOneWithoutMembersInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutMembersInput
}

input SchoolCreateOneWithoutTeamsInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutTeamsInput
}

input SchoolCreateWithoutBallotsInput {
  address: String
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutDomainInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  members: UserCreateManyWithoutSchoolInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutMembersInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  name: String!
  teams: TeamCreateManyWithoutSchoolInput
  zip: String
}

input SchoolCreateWithoutTeamsInput {
  address: String
  ballots: BallotCreateManyWithoutSchoolInput
  canton: String
  city: String
  domain: DomainCreateOneWithoutSchoolsInput
  members: UserCreateManyWithoutSchoolInput
  name: String!
  zip: String
}

input SchoolListRelationFilter {
  every: SchoolWhereInput
  none: SchoolWhereInput
  some: SchoolWhereInput
}

input SchoolOrderByInput {
  address: SortOrder
  canton: SortOrder
  city: SortOrder
  domainId: SortOrder
  id: SortOrder
  name: SortOrder
  zip: SortOrder
}

input SchoolWhereInput {
  address: StringFilter
  AND: [SchoolWhereInput!]
  ballots: BallotListRelationFilter
  canton: StringFilter
  city: StringFilter
  domain: DomainWhereInput
  domainId: IntNullableFilter
  id: IntFilter
  members: UserListRelationFilter
  name: StringFilter
  NOT: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  teams: TeamListRelationFilter
  zip: StringFilter
}

input SchoolWhereUniqueInput {
  id: Int
}

enum Scope {
  CANTONAL
  NATIONAL
  PUBLIC
  SCHOOL
  TEAM
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Team {
  ballots(after: BallotWhereUniqueInput, before: BallotWhereUniqueInput, first: Int, last: Int): [Ballot!]!
  domain: Domain
  id: Int!
  invite: String
  members(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  name: String!
  school: School!
  teacher: User!
}

input TeamCreateInput {
  ballots: BallotCreateManyWithoutTeamInput
  domain: DomainCreateOneWithoutTeamInput
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
}

input TeamCreateManyWithoutDomainInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutDomainInput!]
}

input TeamCreateManyWithoutSchoolInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutSchoolInput!]
}

input TeamCreateManyWithoutTeacherInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutTeacherInput!]
}

input TeamCreateOneWithoutBallotsInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutBallotsInput
}

input TeamCreateOneWithoutMembersInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutMembersInput
}

input TeamCreateWithoutBallotsInput {
  domain: DomainCreateOneWithoutTeamInput
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
}

input TeamCreateWithoutDomainInput {
  ballots: BallotCreateManyWithoutTeamInput
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
}

input TeamCreateWithoutMembersInput {
  ballots: BallotCreateManyWithoutTeamInput
  domain: DomainCreateOneWithoutTeamInput
  invite: String
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
  teacher: UserCreateOneWithoutTeachesInput!
}

input TeamCreateWithoutSchoolInput {
  ballots: BallotCreateManyWithoutTeamInput
  domain: DomainCreateOneWithoutTeamInput
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  teacher: UserCreateOneWithoutTeachesInput!
}

input TeamCreateWithoutTeacherInput {
  ballots: BallotCreateManyWithoutTeamInput
  domain: DomainCreateOneWithoutTeamInput
  invite: String
  members: UserCreateManyWithoutTeamInput
  name: String!
  school: SchoolCreateOneWithoutTeamsInput!
}

input TeamListRelationFilter {
  every: TeamWhereInput
  none: TeamWhereInput
  some: TeamWhereInput
}

input TeamOrderByInput {
  domainId: SortOrder
  id: SortOrder
  invite: SortOrder
  name: SortOrder
  schoolId: SortOrder
  teacherId: SortOrder
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  ballots: BallotListRelationFilter
  domain: DomainWhereInput
  domainId: IntNullableFilter
  id: IntFilter
  invite: StringNullableFilter
  members: UserListRelationFilter
  name: StringFilter
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  school: SchoolWhereInput
  schoolId: IntFilter
  teacher: UserWhereInput
  teacherId: IntFilter
}

input TeamWhereUniqueInput {
  id: Int
  invite: String
}

type Thread {
  attachments(after: AttachmentWhereUniqueInput, before: AttachmentWhereUniqueInput, first: Int, last: Int): [Attachment!]!
  children(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int): [Thread!]!
  createdAt: DateTime!
  id: Int!
  parent: Thread
  reactions(after: ReactionWhereUniqueInput, before: ReactionWhereUniqueInput, first: Int, last: Int): [Reaction!]!
  text: String!
  title: String!
  updatedAt: DateTime!
  user: User!
}

input ThreadCreateManyWithoutParentInput {
  connect: [ThreadWhereUniqueInput!]
  create: [ThreadCreateWithoutParentInput!]
}

input ThreadCreateManyWithoutUserInput {
  connect: [ThreadWhereUniqueInput!]
  create: [ThreadCreateWithoutUserInput!]
}

input ThreadCreateOneWithoutAttachmentsInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutAttachmentsInput
}

input ThreadCreateOneWithoutBallotInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutBallotInput
}

input ThreadCreateOneWithoutChildrenInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutChildrenInput
}

input ThreadCreateOneWithoutReactionsInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutReactionsInput
}

input ThreadCreateWithoutAttachmentsInput {
  ballot: BallotCreateOneWithoutThreadInput
  children: ThreadCreateManyWithoutParentInput
  createdAt: DateTime
  parent: ThreadCreateOneWithoutChildrenInput
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutBallotInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  children: ThreadCreateManyWithoutParentInput
  createdAt: DateTime
  parent: ThreadCreateOneWithoutChildrenInput
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutChildrenInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  ballot: BallotCreateOneWithoutThreadInput
  createdAt: DateTime
  parent: ThreadCreateOneWithoutChildrenInput
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutParentInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  ballot: BallotCreateOneWithoutThreadInput
  children: ThreadCreateManyWithoutParentInput
  createdAt: DateTime
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutReactionsInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  ballot: BallotCreateOneWithoutThreadInput
  children: ThreadCreateManyWithoutParentInput
  createdAt: DateTime
  parent: ThreadCreateOneWithoutChildrenInput
  ref: String
  text: String
  title: String
  updatedAt: DateTime
  user: UserCreateOneWithoutThreadsInput!
}

input ThreadCreateWithoutUserInput {
  attachments: AttachmentCreateManyWithoutThreadInput
  ballot: BallotCreateOneWithoutThreadInput
  children: ThreadCreateManyWithoutParentInput
  createdAt: DateTime
  parent: ThreadCreateOneWithoutChildrenInput
  reactions: ReactionCreateManyWithoutThreadInput
  ref: String
  text: String
  title: String
  updatedAt: DateTime
}

input ThreadListRelationFilter {
  every: ThreadWhereInput
  none: ThreadWhereInput
  some: ThreadWhereInput
}

input ThreadWhereInput {
  AND: [ThreadWhereInput!]
  attachments: AttachmentListRelationFilter
  ballot: BallotWhereInput
  children: ThreadListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  parent: ThreadWhereInput
  parentId: IntNullableFilter
  reactions: ReactionListRelationFilter
  ref: StringNullableFilter
  text: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input ThreadWhereUniqueInput {
  id: Int
}

type User {
  attachments(after: AttachmentWhereUniqueInput, before: AttachmentWhereUniqueInput, first: Int, last: Int): [Attachment!]!
  ballots(after: BallotWhereUniqueInput, before: BallotWhereUniqueInput, first: Int, last: Int): [Ballot!]!
  email: String
  gender: Gender!
  id: Int!
  image: String
  lastname: String
  name: String
  reactions(after: ReactionWhereUniqueInput, before: ReactionWhereUniqueInput, first: Int, last: Int): [Reaction!]!
  role: Role!
  school: School
  shortname: String
  teaches(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int): [Team!]!
  team: Team
  threads(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int): [Thread!]!
}

input UserCreateInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateManyWithoutSchoolInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutSchoolInput!]
}

input UserCreateManyWithoutTeamInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTeamInput!]
}

input UserCreateOneWithoutAttachmentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAttachmentsInput
}

input UserCreateOneWithoutBallotsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBallotsInput
}

input UserCreateOneWithoutReactionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReactionsInput
}

input UserCreateOneWithoutTeachesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTeachesInput
}

input UserCreateOneWithoutThreadsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutThreadsInput
}

input UserCreateOneWithoutVotedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVotedInput
}

input UserCreateWithoutAttachmentsInput {
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateWithoutBallotsInput {
  attachments: AttachmentCreateManyWithoutUserInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateWithoutReactionsInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateWithoutSchoolInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateWithoutTeachesInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateWithoutTeamInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateWithoutThreadsInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutMembersInput
  updatedAt: DateTime
  verified: Boolean
  voted: VotedCreateManyWithoutUserInput
}

input UserCreateWithoutVotedInput {
  attachments: AttachmentCreateManyWithoutUserInput
  ballots: BallotCreateManyWithoutCreatorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  gender: Gender
  image: String
  lastname: String
  name: String
  password: String
  reactions: ReactionCreateManyWithoutUserInput
  role: Role
  school: SchoolCreateOneWithoutMembersInput
  teaches: TeamCreateManyWithoutTeacherInput
  team: TeamCreateOneWithoutMembersInput
  threads: ThreadCreateManyWithoutUserInput
  updatedAt: DateTime
  verified: Boolean
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  gender: SortOrder
  id: SortOrder
  image: SortOrder
  lastname: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  schoolId: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  attachments: AttachmentListRelationFilter
  ballots: BallotListRelationFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  gender: Gender
  id: IntFilter
  image: StringNullableFilter
  lastname: StringNullableFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringNullableFilter
  reactions: ReactionListRelationFilter
  role: Role
  school: SchoolWhereInput
  schoolId: IntNullableFilter
  teaches: TeamListRelationFilter
  team: TeamWhereInput
  teamId: IntNullableFilter
  threads: ThreadListRelationFilter
  updatedAt: DateTimeFilter
  verified: BoolNullableFilter
  voted: VotedListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

input VotedCreateManyWithoutBallotInput {
  connect: [VotedWhereUniqueInput!]
  create: [VotedCreateWithoutBallotInput!]
}

input VotedCreateManyWithoutUserInput {
  connect: [VotedWhereUniqueInput!]
  create: [VotedCreateWithoutUserInput!]
}

input VotedCreateWithoutBallotInput {
  user: UserCreateOneWithoutVotedInput!
}

input VotedCreateWithoutUserInput {
  ballot: BallotCreateOneWithoutVotedInput!
}

input VotedListRelationFilter {
  every: VotedWhereInput
  none: VotedWhereInput
  some: VotedWhereInput
}

input VotedWhereInput {
  AND: [VotedWhereInput!]
  ballot: BallotWhereInput
  ballotId: IntFilter
  id: IntFilter
  NOT: [VotedWhereInput!]
  OR: [VotedWhereInput!]
  user: UserWhereInput
  userId: IntFilter
}

input VotedWhereUniqueInput {
  id: Int
}

input VotesCreateManyWithoutBallotInput {
  connect: [VotesWhereUniqueInput!]
  create: [VotesCreateWithoutBallotInput!]
}

input VotesCreateWithoutBallotInput {
  verify: String
  vote: Int!
}

input VotesListRelationFilter {
  every: VotesWhereInput
  none: VotesWhereInput
  some: VotesWhereInput
}

input VotesWhereInput {
  AND: [VotesWhereInput!]
  ballot: BallotWhereInput
  ballotId: IntFilter
  id: IntFilter
  NOT: [VotesWhereInput!]
  OR: [VotesWhereInput!]
  verify: StringNullableFilter
  vote: IntFilter
}

input VotesWhereUniqueInput {
  id: Int
}
