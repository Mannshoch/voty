/** Declaration file generated by dts-gen */

declare module "@chatscope/chat-ui-kit-react" {
  enum StatusEnum {
    available,
    unavailable,
    away,
    dnd,
    invisible,
    eager,
  }

  enum SizeEnum {
    xs,
    sm,
    md,
    lg,
    fluid,
  }

  export function AddUserButton(_ref: any): any;

  export function AttachmentButton(_ref: any): any;

  export function AvatarGroup(_ref: any): any;

  export function Button(_ref: any): any;

  export function ChatContainer(_ref: any): any;

  export function Conversation(_ref2: any): any;

  export function ConversationHeader(_ref: any): any;

  export function ConversationList(_ref: any): any;

  export function EllipsisButton(_ref: any): any;

  export function ExpansionPanel(_ref: any): any;

  export function InfoButton(_ref: any): any;

  export function InputToolbox(_ref: any): any;

  export function Loader(_ref: any): any;

  export function MainContainer(_ref: any): any;

  export function Message(_ref: any): any;

  export function MessageGroup(_ref: any): any;

  export function MessageList(props: any): any;

  export function MessageSeparator(_ref: any): any;

  export function Overlay(_ref: any): any;

  export function SendButton(_ref: any): any;

  export function Sidebar(_ref: any): any;

  export function StarButton(_ref: any): any;

  export function Status(_ref: any): any;

  export function TypingIndicator(_ref: any): any;

  export function VideoCallButton(_ref: any): any;

  export function VoiceCallButton(_ref: any): any;

  export namespace AddUserButton {}

  declare const ArrowButton: React.FC<{
    className?: string;
    direction?: string;
  }>;

  declare const AttachmentButton: React.FC<{
    className?: string;
  }>;

  declare const Avatar: React.FC<{
    active?: boolean;
    name?: string;
    size?: string;
    className?: string;
    src?: string;
    status?: StatusEnum;
  }>;

  declare const AvatarGroup: React.FC<{
    size?: SizeEnum;
    className?: string;
    max?: number;
    activeIndex?: number;
    hoverToFront?: boolean;
  }>;

  export namespace Button {
    const defaultProps: {
      border: boolean;
      children: any;
      className: string;
      icon: any;
      labelPosition: any;
    };

    namespace propTypes {
      function border(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function icon(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function labelPosition(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace border {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace icon {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace labelPosition {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Buttons {
    function AddUserButton(_ref: any): any;

    function ArrowButton(_ref: any): any;

    function AttachmentButton(_ref: any): any;

    function Button(_ref: any): any;

    function EllipsisButton(_ref: any): any;

    function InfoButton(_ref: any): any;

    function SendButton(_ref: any): any;

    function StarButton(_ref: any): any;

    function VideoCallButton(_ref: any): any;

    function VoiceCallButton(_ref: any): any;

    namespace AddUserButton {
      const defaultProps: {
        className: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.AddUserButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.AddUserButton.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace ArrowButton {
      const defaultProps: {
        className: string;
        direction: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function direction(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.ArrowButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.ArrowButton.propTypes.className
          const isRequired: any;
        }

        namespace direction {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.ArrowButton.propTypes.direction
          const isRequired: any;
        }
      }
    }

    namespace AttachmentButton {
      const defaultProps: {
        className: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.AttachmentButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.AttachmentButton.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace Button {
      const defaultProps: {
        border: boolean;
        children: any;
        className: string;
        icon: any;
        labelPosition: any;
      };

      namespace propTypes {
        function border(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function icon(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function labelPosition(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace border {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.Button.propTypes.border
          const isRequired: any;
        }

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.Button.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.Button.propTypes.className
          const isRequired: any;
        }

        namespace icon {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.Button.propTypes.icon
          const isRequired: any;
        }

        namespace labelPosition {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.Button.propTypes.labelPosition
          const isRequired: any;
        }
      }
    }

    namespace EllipsisButton {
      const defaultProps: {
        className: string;
        orientation: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function orientation(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.EllipsisButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.EllipsisButton.propTypes.className
          const isRequired: any;
        }

        namespace orientation {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.EllipsisButton.propTypes.orientation
          const isRequired: any;
        }
      }
    }

    namespace InfoButton {
      const defaultProps: {
        className: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.InfoButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.InfoButton.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace SendButton {
      const defaultProps: {
        className: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.SendButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.SendButton.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace StarButton {
      const defaultProps: {
        className: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.StarButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.StarButton.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace VideoCallButton {
      const defaultProps: {
        className: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.VideoCallButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.VideoCallButton.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace VoiceCallButton {
      const defaultProps: {
        className: string;
      };

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.VoiceCallButton.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Buttons.VoiceCallButton.propTypes.className
          const isRequired: any;
        }
      }
    }
  }

  export namespace ChatContainer {
    const defaultProps: {
      children: any;
    };

    namespace propTypes {
      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Conversation {
    const defaultProps: {
      active: boolean;
      info: any;
      lastActivityTime: any;
      lastSenderName: any;
      name: any;
      unreadCnt: any;
      unreadDot: boolean;
    };

    function Content(_ref3: any): any;

    function Operations(_ref: any): any;

    namespace Content {
      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function info(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function lastSenderName(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function name(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Content.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Content.propTypes.className
          const isRequired: any;
        }

        namespace info {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Content.propTypes.info
          const isRequired: any;
        }

        namespace lastSenderName {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Content.propTypes.lastSenderName
          const isRequired: any;
        }

        namespace name {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Content.propTypes.name
          const isRequired: any;
        }
      }
    }

    namespace Operations {
      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function visible(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Operations.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Operations.propTypes.className
          const isRequired: any;
        }

        namespace visible {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Conversation.Operations.propTypes.visible
          const isRequired: any;
        }
      }
    }

    namespace propTypes {
      function active(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function info(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function lastActivityTime(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function lastSenderName(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function name(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function unreadCnt(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function unreadDot(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace active {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace info {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace lastActivityTime {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace lastSenderName {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace name {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace unreadCnt {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace unreadDot {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace ConversationHeader {
    const defaultProps: {
      children: any;
    };

    function Actions(_ref: any): any;

    function Back(_ref: any): any;

    function Content(_ref: any): any;

    namespace Actions {
      const defaultProps: {
        children: any;
      };

      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Actions.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Actions.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace Back {
      const displayName: string;

      namespace defaultProps {
        const children: any;

        function onClick(): void;
      }

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function onClick(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Back.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Back.propTypes.className
          const isRequired: any;
        }

        namespace onClick {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Back.propTypes.onClick
          const isRequired: any;
        }
      }
    }

    namespace Content {
      const defaultProps: {
        children: any;
        info: string;
        userName: string;
      };

      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function info(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function userName(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Content.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Content.propTypes.className
          const isRequired: any;
        }

        namespace info {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Content.propTypes.info
          const isRequired: any;
        }

        namespace userName {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.ConversationHeader.Content.propTypes.userName
          const isRequired: any;
        }
      }
    }

    namespace propTypes {
      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace ConversationList {
    const defaultProps: {
      children: any[];
      className: string;
      loading: boolean;
      scrollable: boolean;
    };

    namespace propTypes {
      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function loading(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function scrollable(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace loading {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace scrollable {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace EllipsisButton {
    const defaultProps: {
      className: string;
      orientation: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function orientation(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace orientation {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace ExpansionPanel {
    const defaultProps: {
      children: any;
      open: boolean;
      title: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function open(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function title(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace open {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace title {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace InfoButton {
    const defaultProps: {
      className: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace InputToolbox {
    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Loader {
    const defaultProps: {
      className: any;
      title: any;
      variant: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function variant(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace variant {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace MainContainer {
    const defaultProps: {
      children: any;
      responsive: boolean;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function responsive(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace responsive {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Message {
    const defaultProps: {
      avatarPosition: any;
      avatarSpacer: boolean;
      model: {
        direction: number;
        message: string;
        sender: string;
        sentTime: string;
      };
    };

    function Footer(_ref: any): any;

    function Header(_ref: any): any;

    namespace Footer {
      const defaultProps: {
        children: any;
        sender: string;
        sentTime: string;
      };

      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function sender(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function sentTime(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Footer.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Footer.propTypes.className
          const isRequired: any;
        }

        namespace sender {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Footer.propTypes.sender
          const isRequired: any;
        }

        namespace sentTime {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Footer.propTypes.sentTime
          const isRequired: any;
        }
      }
    }

    namespace Header {
      const defaultProps: {
        children: any;
        sender: string;
        sentTime: string;
      };

      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function sender(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function sentTime(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Header.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Header.propTypes.className
          const isRequired: any;
        }

        namespace sender {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Header.propTypes.sender
          const isRequired: any;
        }

        namespace sentTime {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Message.Header.propTypes.sentTime
          const isRequired: any;
        }
      }
    }

    namespace propTypes {
      function avatarPosition(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function avatarSpacer(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function model(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      namespace avatarPosition {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace avatarSpacer {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace model {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace MessageGroup {
    const defaultProps: {
      avatarPosition: any;
      direction: string;
      sender: string;
      sentTime: string;
    };

    function Footer(_ref: any): any;

    function Header(_ref: any): any;

    function Messages(_ref: any): any;

    namespace Footer {
      const defaultProps: {
        children: any;
      };

      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageGroup.Footer.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageGroup.Footer.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace Header {
      const defaultProps: {
        children: any;
      };

      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageGroup.Header.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageGroup.Header.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace Messages {
      const defaultProps: {
        children: any;
      };

      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageGroup.Messages.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageGroup.Messages.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace propTypes {
      function avatarPosition(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function direction(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function sender(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function sentTime(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace avatarPosition {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace direction {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace sender {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace sentTime {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  declare const MessageInput: React.FC<{
    activateAfterChange?: boolean;
    attachButton?: boolean;
    attachDisabled?: boolean;
    autoFocus?: boolean;
    className?: string;
    disabled?: boolean;
    fancyScroll?: boolean;
    placeholder?: string;
    sendButton?: boolean;
    sendDisabled?: boolean;
    value?: any;
    onAttachClick?: () => void;
    onChange?: (value) => void;
    onSend?: (value: string) => void;
  }>;

  export namespace MessageList {
    const defaultProps: {
      loading: boolean;
      loadingMore: boolean;
      typingIndicator: any;
    };

    function Content(_ref: any): any;

    namespace Content {
      const displayName: string;

      namespace propTypes {
        function children(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace children {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageList.Content.propTypes.children
          const isRequired: any;
        }

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.MessageList.Content.propTypes.className
          const isRequired: any;
        }
      }
    }

    namespace propTypes {
      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function loading(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function loadingMore(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function onYReachStart(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function typingIndicator(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace loading {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace loadingMore {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace onYReachStart {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace typingIndicator {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace MessageSeparator {
    const defaultProps: {
      as: string;
      children: any;
      content: any;
    };

    namespace propTypes {
      function as(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function content(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace as {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace content {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Overlay {
    const defaultProps: {
      blur: boolean;
      children: any;
      className: string;
      grayscale: boolean;
    };

    namespace propTypes {
      function blur(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function grayscale(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace blur {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace grayscale {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Search {
    const $$typeof: any;

    const displayName: string;

    function render(_ref: any, ref: any): any;

    namespace defaultProps {
      const disabled: boolean;

      const placeholder: string;

      const value: any;

      function onChange(): void;

      function onClearClick(): void;
    }

    namespace propTypes {
      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function disabled(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function onChange(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function onClearClick(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function placeholder(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace disabled {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace onChange {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace onClearClick {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace placeholder {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace value {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }

    namespace render {
      const displayName: string;

      namespace defaultProps {
        const disabled: boolean;

        const placeholder: string;

        const value: any;

        function onChange(): void;

        function onClearClick(): void;
      }

      namespace propTypes {
        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function disabled(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function onChange(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function onClearClick(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function placeholder(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function value(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Search.render.propTypes.className
          const isRequired: any;
        }

        namespace disabled {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Search.render.propTypes.disabled
          const isRequired: any;
        }

        namespace onChange {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Search.render.propTypes.onChange
          const isRequired: any;
        }

        namespace onClearClick {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Search.render.propTypes.onClearClick
          const isRequired: any;
        }

        namespace placeholder {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Search.render.propTypes.placeholder
          const isRequired: any;
        }

        namespace value {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.Search.render.propTypes.value
          const isRequired: any;
        }
      }
    }
  }

  export namespace SendButton {
    const defaultProps: {
      className: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Sidebar {
    const defaultProps: {
      children: any;
      className: string;
      loading: boolean;
      position: any;
      scrollable: boolean;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function loading(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function position(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function scrollable(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace loading {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace position {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace scrollable {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace StarButton {
    const defaultProps: {
      className: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace Status {
    const defaultProps: {
      size: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function name(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function selected(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function status(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace name {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace selected {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace size {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace StatusList {
    const $$typeof: any;

    const displayName: string;

    function render(_ref: any, ref: any): any;

    namespace defaultProps {
      function onChange(): void;
    }

    namespace propTypes {
      function children(props: any, propName: any, componentName: any): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function itemsTabIndex(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function onChange(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function selected(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace itemsTabIndex {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace onChange {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace selected {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace size {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }

    namespace render {
      const displayName: string;

      namespace defaultProps {
        function onChange(): void;
      }

      namespace propTypes {
        function children(props: any, propName: any, componentName: any): any;

        function className(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function itemsTabIndex(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function onChange(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function selected(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        function size(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;

        namespace className {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.StatusList.render.propTypes.className
          const isRequired: any;
        }

        namespace itemsTabIndex {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.StatusList.render.propTypes.itemsTabIndex
          const isRequired: any;
        }

        namespace onChange {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.StatusList.render.propTypes.onChange
          const isRequired: any;
        }

        namespace selected {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.StatusList.render.propTypes.selected
          const isRequired: any;
        }

        namespace size {
          // Too-deep object hierarchy from chatscope__chat_ui_kit_react.StatusList.render.propTypes.size
          const isRequired: any;
        }
      }
    }
  }

  export namespace TypingIndicator {
    const defaultProps: {
      content: string;
    };

    namespace propTypes {
      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function content(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace content {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace VideoCallButton {
    const defaultProps: {
      className: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }

  export namespace VoiceCallButton {
    const defaultProps: {
      className: string;
    };

    namespace propTypes {
      function children(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      function className(
        p0: any,
        p1: any,
        p2: any,
        p3: any,
        p4: any,
        p5: any
      ): any;

      namespace children {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }

      namespace className {
        function isRequired(
          p0: any,
          p1: any,
          p2: any,
          p3: any,
          p4: any,
          p5: any
        ): any;
      }
    }
  }
}
